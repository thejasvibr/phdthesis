[
["index.html", "Theoretical and empirical investigation of echolocation in bat groups Summary", " Theoretical and empirical investigation of echolocation in bat groups Thejasvi Beleyur \\(2021-01-09\\) Summary English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English English "],
["zusammenf.html", "Zusammenfassung", " Zusammenfassung Deutsch Deutsch Deutsch Deutsch Deutsch Deutsch Deutsch DeutschDeutsch Deutsch Deutsch Deutsch Deutsch Deutsch Deutsch Deutsch DeutschDeutschDeutsch Deutsch Deutsch Deutsch Deutsch Deutsch Deutsch DeutschDeutschDeutsch Deutsch Deutsch Deutsch Deutsch Deutsch Deutsch DeutschDeutschDeutsch Deutsch Deutsch Deutsch Deutsch Deutsch Deutsch DeutschDeutschDeutsch Deutsch Deutsch Deutsch Deutsch Deutsch Deutsch DeutschDeutschDeutsch Deutsch Deutsch Deutsch Deutsch Deutsch Deutsch DeutschDeutschDeutsch Deutsch Deutsch Deutsch Deutsch Deutsch Deutsch DeutschDeutschDeutsch Deutsch Deutsch Deutsch Deutsch Deutsch Deutsch DeutschDeutschDeutsch Deutsch Deutsch Deutsch Deutsch Deutsch Deutsch DeutschDeutschDeutsch Deutsch Deutsch Deutsch Deutsch Deutsch Deutsch DeutschDeutschDeutsch Deutsch Deutsch Deutsch Deutsch Deutsch Deutsch DeutschDeutschDeutsch Deutsch Deutsch Deutsch Deutsch Deutsch Deutsch DeutschDeutschDeutsch Deutsch Deutsch Deutsch Deutsch Deutsch Deutsch DeutschDeutschDeutsch Deutsch Deutsch Deutsch Deutsch Deutsch Deutsch DeutschDeutschDeutsch Deutsch Deutsch Deutsch Deutsch Deutsch Deutsch DeutschDeutsch Bulla! I know not who I am, Bulla! I know not who I am … Nor am I the believer in the mosque, Nor am I in the rituals of the infidel, Nor am I the pure in the impure, Nor am I inherent in the Vedas … Nor am I of the water nor of the land, Nor am I fire nor air, Bulla! I know not who I am, Nor am I Arabic nor from Lahore, … Nor did I name myself, Beginning or end I know just the self, Do not acknowledge duality, There’s none wiser than I Who is this Bulla Shah? Bulla! I know not who I am, Bulla! I know not who I am Bulla Shah, Sufi mystic and poet.1 Translation by Sonyia Jamal (2017). Echolocation is still a topic that resists neat classification into any conventional category of science. It ramifies into widely different scientific disciplines including ethology, mammalogy, physiology, psychology, acoustics, nd the mathematical theory of signal detectionl. The results of new investigations have reemphasized the necessity of a broad biological perspective for any serious appreciation of echolocation. Donald Griffin, Listening in the Dark References "],
["general-introduction.html", "Chapter1 General Introduction 1.1 The ‘noise’ in active sensing groups 1.2 Bat echolocation 1.3 Thesis outline", " Chapter1 General Introduction Alternate start: Sensory systems are malleable and evolve to accomodate the behaviours that are being selected for?? eg. how all sensory systems in social animals are somehow adapted to support the behaviours they output eg. social communication calls, collective movements, lekking etc. Group living adds to Group-living in animals has evolved multiple times across the animal kingdom. Individuals living in groups reap the benefits of this strategy, while also suffering its disadvantages (???). Animals in groups experience improved foraging, predator evasion, offspring survivals, to name a few advantages. However, the disadvantages also include, among others, increased resource competition among individuals and spread of disease (???). Group living animals also often show special adaptations for group-living itself, in terms of their morphology (eg. soldier, worker and alate ants, deer antlers []), behaviour (swarming and schooling in birds, mammals and fish []) and communication strategies (alarm calls in meerkats and marmots, human speech []) [???]. The fluidity with which individuals in a murmuration of starlings or school of fish move belie rapid and complex underlying sensorimotor loops behind such group events. These collective behaviours can be replicated in computational agent-based models with simple behavioural heuristics based on the relative proximity and position of each agent’s neighbours (Reynolds 1987; Couzin et al. 2002). The ‘sensorimotor loop’ or behavioural heuristics in these models mimics what animals in a group are likely to be doing (Herbert-Read 2016), and broadly consists of the following cycle: 1) the individual assessing the relative position and movement direction of its neighbours, 2) using a decision criterion to integrate information on the neighbour positions and movements and 3) moving in a direction using the integrated information. A key step in the initiation and maintenance of any collective behaviour is neighbour detection through the sensory modalities available to the animal. Many of the collective movements studied experimentally to date have been in visually dominant animals (Pita et al. 2016) such as birds, fish schools, mammals and flies. Vision is a passive sensory modality, in that the animal is merely a ‘receiver’ of light. The fact that each animal acts as a receiver, and does not affect the amount of light received by others majorly (eg. light obstruction due their body opacity) means that visually driven collective behaviour can scale well with group size. Given sufficient ambient light, individuals in all sizes of groups (small to large) are expected to independently be able to detect their neighbour’s and thus show co-ordinated movement. This expectation is supported by experimental observations of thousand strong starling flocks (Ballerini et al. 2008), schools with ten-hundreds of fish (Tunstrøm et al. 2013), or even humans as we aggregate in small to very large groups (Moussaı̈d, Helbing, and Theraulaz 2011; Dyer et al. 2009). Concrete support for the use of visual cues, and their role in modulating individual decisions in group movement is provided by studies that reconstruct individual sensory umwelts (Turner and Penn 2002; Strandburg-Peshkin et al. 2013; Belden et al. 2019). In contrast to simple models that assume all neighbours in a fixed sensory volume can be detected (Reynolds 1987; Couzin et al. 2002), sensory reconstruction approaches include the details of neighbour positions and visual acuity (Strandburg-Peshkin et al. 2013; Belden et al. 2019), and thus allow a detailed analysis of individual sensory inputs and motor outputs. What about collective motion driven by other sensory modalities where sensing is not independent and is actually expected to be impeded in larger groups? 1.1 The ‘noise’ in active sensing groups 1.2 Bat echolocation 1.2.1 Listening in the chorus: from humans to animals Particularly from a sensory perspective, being part of a group brings about its own set of challenges. Animals have to deal with the task of sorting out noise from signal all the time - bird choruses [species can be trained to dteect single species in a chorus], frogs [Bee], cricket chorusses[Balakrishinan], and finally even humans. The psychoacoustic techniques and approaches used in humans have served a strong basis for many investigations in the field of animal acoustics/communication [BeeMicheyl2008]. eg. spatial unmasking, detecting signals at ‘negative SNRs’ and acoustic streaming have all been shown in animals in fact. Many of the behaviourally relevant animal contexts studied to date have been in behaviours that the animal perhaps has a period of a few seconds or minutes to execute. The long time scale perhaps allows the individual to ‘process’ and consider the most relevant signal in the midst of the incoming cacophony. What happens however, when the process of signal There are all kinds of adaptations in the animal kingdom. Training/experience is known to improve performance 1.2.2 Active sensing animals and listening in the noise Active sensing animals emit energy and blah blah blah. Discerning the correct type of signal from the bakcground is important but most of these other animals use the cues for decisions that are made over somewhat longer time scales eg. a few seconds to a few minutes. But active sensing animals need to manage in the now, and show a variety of adaptations in response. Electric fish, dolphins, bats. eg. JAR in electric fish, calling louder in bats, dolphins etc. The rapidness of the adaptation indicates how vital it is for the animals?? 1.2.3 Active sensing in bats and in noise Echolocating bats emit loud calls and listen for echoes – The returning echoes serve as packets of information that the bat uses to gain insights about its surroundings. The time delay, echo level, interference and spectral properties and other blah blah tell the bat more about the objects. Echolocation might work based on a type of efference copy based mechanism. 1.2.4 Sensory adaptations for listening in the ‘noise’ Spatial unmasking 1.2.5 1.2.6 Treading trodden paths with new technology How the study of group echolocation has always fascinated scientists but the technology (hardware and software) has not always been very accesible till now. Now is a GoldenZeit. 1.2.7 Focus on open and reproducible science Uploading all my data, documenting code and publishing code as packages with publicly available tutorials are part of my attempts to share the science I do as much as possible. 1.2.8 Group echolocation as a ‘serious’ sensory challenge 1.2.9 Implications of group echolocation on collective behaviour Analogies to RADAR: one might think a negative signal-to-noise ratio is not possible. But published data clearly shows this - and also, that when there is a 1.3 Thesis outline Echolocation is expected to become increasingly infeasible with growing group sizes due to masking. In response to masking in the form of artificial playbacks and conspecific calls, bats show a variety of changes to their echolocation behaviour. While many experimental studies have reported the changes bats show as ‘emitters’ of sound, very little focus had been given to date on bats as ‘receivers’. Computational work modelling group echolocation has been restricted to models that are qualitatively by the biology of echolocation. In chapter 2 I present an experimentally parameterised computational model that estimates the sensory inputs a bat may receive in terms of the number of echoes detected over a range of group sizes. I formulated a conceptual framework to estimate echo detection in the presence of noise by combining published literature on the bat auditory system and echolocation. In Chapter 3 (Horseshoebat), I present bow bow bow . A little bit about CF bats, and how they are more likely to face overlaps than FM bats at least temporally. In Chapter 4 (Uschichka), I do kat kat kat kat. From the time of Griffin &amp; Galambos, who were the first to use the newly invented ultrasonic microphone to record ultrasound calls - the field of echolocation has always been a field that has ‘resisted’ In Chapter 5 (SFS), 1. About the SFS methodology : Multi-microphone arrays have been an important and indispensable tool in the study of echolocation in the laboratory ever since the work of [Aubauer XXXX]. Working with microphone arrays in the field however comes with a series of challenges. Handling multi-microphone arrays in the field can be logistically and physically straining: the long cables involved must be brought to order each time, the arrays themselves can be bulky and must be assembled on site each time, and in certain configurations the positions of each microphone may need to be measured each time the array is setup. While rewarding in terms of the data it generates, the process of setting up a microphone array can be strenuous especially when it comes to taking positional measurements of microphone positions. The use of TotalStation type surveying systems that provide direct XYZ measurements are not common in the field (they are themselves another piece of bulky equipment), and instead it is more common to measure inter-microphone distances with a tape measure or laser range finders. Having measured the inter-microphone distances in an array, the final XYZ positions of each microphone can be reconstructed. In my search for a method that …….an academic ‘Christmas present’. In Chapter 6 (tacost), In Chapter 7 (itsfm) References "],
["cpnchapter.html", "Chapter2 Modeling active sensing in groups of bats reveals echo detection even in large groups Abstract 2.1 Introduction 2.2 Materials and methods 2.3 Results 2.4 Discussion 2.5 Conclusion 2.6 Supplementary Information", " Chapter2 Modeling active sensing in groups of bats reveals echo detection even in large groups This chapter was published as a peer-reviewed paper in the Proceedings of the National Academy of Sciences of the United States of America: Beleyur, T., &amp; Goerlitz, H. R. (2019). Modeling active sensing reveals echo detection even in large groups of bats. Proceedings of the National Academy of Sciences, 116(52), 26662-26668. TODO STUFF: Abstract Active sensing animals perceive their surroundings by emitting probes of energy and analyzing how the environment modulates these probes. However, the probes of conspecifics can jam active sensing, which should cause problems for groups of active sensing animals. This problem was termed the cocktail party nightmare for echolocating bats: as bats listen for the faint returning echoes of their loud calls, these echoes will be masked by the loud calls of other close-by bats. Despite this problem, many bats echolocate in groups and roost socially. Here, we present a biologically parametrized framework to quantify echo detection in groups. Incorporating properties of echolocation, psychoacoustics, acoustics, and group flight, we quantify how well bats flying in groups can detect each other despite jamming. A focal bat in the center of a group can detect neighbors in group sizes of up to 100 bats. With increasing group size, fewer and only the closest and frontal neighbors are detected. Neighbor detection is improved by longer call intervals, shorter call durations, denser groups, and more variable flight and sonar beam directions. Our results provide a quantification of the sensory input of echolocating bats in collective group flight, such as mating swarms or emergences. Our results further generate predictions on the sensory strategies bats may use to reduce jamming in the cocktail party nightmare. Lastly, we suggest that the spatially limited sensory field of echolocators leads to limited interactions within a group, so that collective behavior is achieved by following only nearest neighbors. 2.1 Introduction Active sensing animals use self-generated energy to sense their surroundings by analyzing how objects around them change the emitted energy (Nelson and MacIver 2006). Bats emit loud ultrasonic calls and detect objects around them by listening to the echoes (M. B. Fenton 2013, @griffin1958a)reflected off these objects. Active sensing is an effective sensory modality when the animal is solitary. However, when multiple active sensing animals emit pulses of energy in close proximity, they may “jam” each other and mutually interfere with their ability to detect objects in their environment (Nelson and MacIver 2006, @matsubara1978a). If groups of echolocating bats mutually jam or mask each other, they would not be able to detect each other. Due to the intense jamming, individuals would have a progressively difficult time detecting the echoes reflecting off their neighbors, and thus not detect their neighbors at all. Without detecting each other, groups of individuals cannot show collision-free flight. However, many bat species are very gregarious, and fly and echolocate together in groups of tens to millions of bats. Bat groups also show coordinated behaviors in cave flights, evening emergences, and mating swarms (Ortega 2016, @kunz1982a). How is their ability to detect each other impaired by increasing group size? How many of its neighbors does a bat actually detect in the presence of intense jamming? What strategies may improve echo detection and thus neighbor detection when many active sensing animals are together? We present biologically parametrized simulations to answer how bats manage to echolocate in the face of intense jamming. In human psychophysics, the sensory challenge of perceiving an auditory cue among other similar sounds has been called the“cocktail party problem”(Cherry 1953, @bee2008a). When applied to bat echolocation, the cocktail party problem has been elevated to the“cocktail party nightmare”, given the high repetition rate, similarity, and amplitude of echolocation calls. On top of these factors is the nonlinear increase in the number of masking sounds with increasing group size (Ulanovsky and Moss 2008). Empirical studies to date have investigated the cocktail party problem from a sender’s perspective (Bee and Micheyl 2008, @ulanovsky2008a, @brumm2005a). Through field observations, playback studies, and on-body tags (Amichai, Blumrosen, and Yovel 2015, @cvikel2015a, @gillam2010a, @gillam2016a, @lin2016a, @ulanovsky2004a, @habersetzer1981a, @jones1993a, @jarvis2013a, @adams2017a, @falk2014a, @surlykke1993a), we now know a range of echolocation strategies that bats show under challenging acoustic conditions. Bats can increase their call intensity, alter their call duration and frequency range, or suppress calling in the presence of conspecifics and noise playbacks (Amichai, Blumrosen, and Yovel 2015, @adams2017a, @tressler2009a, @m1989a). In contrast to the many reports of bats’ responses to noisy conditions, very little work has been done in conceptually understanding how receiver strategies might contribute to dealing with the cocktail party nightmare (Lin and Abaid 2015, @perkins2017a). To our knowledge, biological modeling of the cocktail party nightmare from a receiver’s perspective that includes the details of bat echolocation and auditory processing is lacking. We fill this gap in conceptual understanding by presenting a biologically parametrized model based on the known properties of bat audition and the acoustics of a multi bat echolocation scenario. We quantified how well a bat flying with conspecifics can perceive its neighbors in terms of the returning echoes it detects. Through our simulations, we arrive at a sensory estimate of what a bat in the cocktail party nightmare may be detecting, if anything at all. 2.2 Materials and methods We model the echolocation of frequency-modulating (FM) bats. The calls of FM bats are typically downward frequency-modulated and of short duration (\\(\\leq\\) 5 ms). Each call is followed by a longer silence (80–150 ms) called the interpulse interval (Jones, Griffin, and Galambos (1999)). FM bats thus sense their world “stroboscopically” by emitting a call and listening for the echoes returning during the interpulse interval (Griffin and Galambos (1941)). In the absence of any loud conspecific calls, a bat is able to hear all returning echoes and thus to detect all objects around it. However, in the presence of other loud bat calls, some of its own returning echoes may be masked. In that case, the bat will hear a few or none of the returning echoes.This corresponds to the bat detecting a few or none of the surrounding objects. In the cocktail party nightmare the “objects” each bat is trying to detect are its neighbors Our model of the cocktail party nightmare is designed to describe the auditory scene (Ulanovsky and Moss (2008)) of a bat emerging from a cave in a group as it echolocates on the wing. A focal bat flying in a group of N bats may detect up to N-1 of its neighbors (excluding itself), which is equivalent to hearing N-1 returning echoes. The focal bat receives 2 kinds of loud masking sounds that interfere with the detection of its neighbors: 1) the N-1 loud calls emitted by other bats in the group, and 2) the secondary echoes created by the call of a neighboring bat, reflecting once off another bat, and arriving at the focal bat. Every neighboring bat call generates N-2 secondary echoes, meaning that the focal bat can receive up to N-1xN-2 secondary echoes (Figure ). We implemented a spatially explicit 2-dimensional (2D) simulation of bat echolocation, sound propagation, and sound reception and include mammalian auditory phenomena to quantify how many and which neighbors a bat can detect in the sonar cocktail party nightmare. We then explored how changes in group size and in sender strategies affect neighbor detection in a group. 2.2.1 Model Scenarios We ran 2 model scenarios to test the effect of 1) increasing group size and of 2) variation in call parameters, group geometry, and acoustic parameters on neighbor detection. In all models, we used the central-most bat in the group as the focal bat. Scenario 1: Effect of group size on neighbor detection: We simulated groups of 5,10, 30, 50, 75, 100, and 200 well-aligned bats with identical echolocation and hearing properties flying at a minimum inter-bat distance of 0.5 m (Table ?? for full model parameters). The number and location of neighbors detected by the focal bat were recorded in every simulation run. Scenario 2: Effect of call parameters, group geometry, and acoustic parameters on neighbor detection: Here, we varied other parameters relevant to the cocktail party nightmare (Table ??) while keeping group size constant (\\(N_{bats}\\)=100, i.e. the largest group size from Scenario 1 with a biologically relevant neighbordetection rate). We varied call parameters (interpulse interval, call duration,source level), group parameters (heading variation, minimum inter-bat spacing), and acoustic parameters (atmospheric absorption, acoustic shadowing). 2.2.2 Model Implementation Each model run simulated 1 interpulse interval of the focal bat, and we calculated the timing and received level of all sounds (target echoes, masking calls, and secondary echoes) that arrived at the focal bat during that interpulse interval. Each model run simulated a series of sounds that arrived during an interpulse interval following the focal bats’ call, based on a spatially explicit distribution of a group of bats (SI Appendix, Schematic ). At the beginning of every model run, N bats were placed in a 2D space with randomly assigned heading directions (SI Appendix, and ). For each neighboring bat, we calculated its angle and distance to the focal bat. The received level was calculated based on a common source level for all bats, spherical and atmospheric spreading over each call’s and echo’s travel distance, and acoustic shadowing. Acoustic shadowing is the reduction in received level of a sound due to obstructions in its path. A sound in the cocktail party nightmare may pass around obstacles (other bats) as it propagates from source to receiver. The reduction in received level was measured and calculated as a linear function of the number of bats obstructing the path between source and receiver (SI Appendix ).For target and secondary echoes, we also considered monostatic and bistatic target strengths measured in this paper (SI Appendix, ). The arrival time of target echoes within the interpulse interval was determined according to the 2-way travel time to the echo-reflecting neighboring bat. The arrival time of masking calls and secondary echoes was assigned randomly with uniform probability across the interpulse interval. The random arrival time assignment of calls and secondary echoes recreates the uncoordinated echolocation of all bats in the group. It is unlikely that multiple bats in large groups can coordinate their calls effectively, and independent calling has been reported even in small groups of 4 bats (Hase (2018)). All bats in a group were identical in their calling properties, and we treated all sounds as constant tones of equal duration, i.e., we did not explicitly model spectral emission, propagation, and reception properties. The only difference between each of the sounds was their path and source of sound production. The omission of spectral properties is a conservative choice that assumes maximal masking of the primary echoes, thus allowing us to study the role of intensity differences and temporal separation between target echoes and masking sounds. Once we calculated the timing and received level of all sounds at the focal bat, we accounted for directional hearing sensitivity (SI Appendix, Figure ) and spatial unmasking. Spatial unmasking describes the reduction in experienced masking as the arrival angle between masker and target sound increases (Ebata (2003), Sümer, Denzinger, and Schnitzler (2009)). We simulated spatial unmasking by the reduction of a masker’s effective received level based on its angular separation to an echo. For each echo, the same masker will have a different effective masking level as its relative angle of arrival will be unique for each echo. We thus calculated the effective masking level of each masker for each echo. The effective masking levels of all maskers were then combined to form a time-variant and echo-specific “masker SPL profile” (SI Appendix, Figure D). This is essentially the joint sound pressure level (SPL) of all maskers over time. We then expressed this echo-specific masker SPL profile in relation to the echo’s SPL, thus obtaining a relative “echo-to-masker ratio profile” (SI Appendix,Figure E). This is equivalent to a signal-to-noise ratio profile, where the echo is the signal and the masker profile is the noise. In addition to angular separation, signal detection is also determined by the temporal separation between signal (echo) and masker (Møhl and Surlykke (1989),Yost (2007),Siewert, Schillinger, and Schmidt (2004)). Masking increases as the masker arrives closer in time to the echo. Masking occurs over longer durations when maskers arrive before the signal (forward masking) than afterward (backward masking). We recreated the asymmetric masking by a “temporal masking envelope” temporally centered at the echo (SI Appendix, Figure ). The echo was considered heard if the echo-to-masker ratio profile was above the temporal masking envelope. We allowed short drops of the echo-to-masker ratio profile below the temporal masking envelope, for a combined maximum duration of less than 25% of an echo’s duration. Alternatively, we defined an echo to be masked (= not heard), if the echo-to-masker ratio profile was below the temporal masking envelope for more than 25% of the echo duration. The 25% threshold was an arbitrarily chosen conservative value to prevent masking by rare and short bursts of high sound pressure level that are unlikely to affect echo detection biologically (SI Appendix, ). 2.2.3 Model Parametrization We implemented a detailed set of echolocation, group and sound properties in our model, including call and hearing directionality, spatial unmasking, temporal masking, group geometry, and details of sound propagation. These properties were parameterized based on published results wherever available. Acoustic shadowing and target strengths (monostatic and bistatic) of bats were specifically measured for this work. All details of the model parameters including our respective measurements and on model implementation are presented in the Supporting Information. 2.3 Results 2.3.1 Effect of Group Size on Neighbor Detection At group sizes of 5 and 10, the focal bat hears the echoes of most or all of its neighbors per call (median: 4 and 8 echoes per call at N=5 and 10, respectively; Figure ). At progressively larger group sizes, the median number of detected neighbors drops from 4 to 0 at group sizes of 30 to 200. Yet even in a group of 100 bats, while the median number of detected neighbors is zero, the 90th percentile is 1, showing that a neighbor is not detected with each call, but occasionally. Beyond a group of 100 bats, the focal bat typically detects no neighbors at all. The initial rise in detected neighbors in groups of 5 to 30 bats is primarily caused by the increased number of neighbors that could be detected, which is soon counter-acted by the intense masking that rises non linearly with group size. We next derived the probability of detecting at least 1 neighbor per call, which describes the average rate of neighbor detection (Figure A, blue). At smaller groups of 5 to 30 bats, the focal bat detects at least 1 neighbor per call at above 0.95 probability. At larger group sizes (50 to 100), the probability of detecting at least 1 neighbor drops rapidly to 0.3 per call in a group of 100 bats, and is basically zero for a group of 200 bats (0.004 probability). A bat (with 10 Hz calling rate) flying in a group of 100 bats will thus detect at least 1 neighbor around 3 times per second (3 Hz detection rate), while a bat flying in a group of 30 bats will detect at least 1 neighbor almost every time it calls (9.5 Hz detection rate). The probability of detecting multiple bats per call is lower than just detecting at least 1 bat (Figure A). Yet,even in a group of 50 bats, the focal bat has a probability of detecting at least 2 and 4 neighbors per call of about 0.5 and 0.1, respectively. We next quantified which neighbors the focal bat detects. Detection is generally limited to nearby neighbors (Figure B) and, with increasing group size, to neighbors in front of the focal bat (Figure C). At a group size of 30 bats, the focal bat occasionally detects neighbors that are up to 2 m away in radial distance, which is the furthest neighbor distance. With increasing group sizes, despite the group being more spread out, the focal bat can only detect its nearest neighbors (e.g., neighbors at 0.5 m in a group of 200 bats; Figure B). In the azimuthal plane, at small group sizes, the focal bat initially detects neighbors all around it (95%-neighbor detection angle range≥237° for up to 50 bats; Figure C). With increasing group size, a frontal bias in neighbor detection appears (95%-neighbor detection angle range: 191 to 35° for 100 and 200 bats; Figure C). 2.3.2 Effect of Call Parameters, Group Geometry, and Acoustic Parameters on Neighbor Detection We next analyzed how variation in call parameters, group structure, and acoustic parameters affected neighbor detection. We fixed the group size to 100, as at this size,the focal bat could typically detect at most 1 neighbor (90%ile, Figure ) at 0.3 probability (Figure A) per call. We thus reduced the output of each simulation run to a binary neighbor detection score of 1 (detection) or 0 (no detection). We analyzed the effect of each parameter on neighbor detection with a logistic regression, treating all parameters as categorical and using their value in Scenario 1 as reference (parameter range in Table ??). The call parameters interpulse interval and call duration showed the strongest effect (Figure A,B and SI Appendix, Table ). Increasing the interpulse interval from 100 ms to 200 and 300 ms increases neighbor detection probability by about 15 and 75 times, while reducing it to 50ms lowers neighbor detection to 0.05 times Scenario 1 (Figure A).Shortening call duration from 2.5 ms to 1 ms led to 35 times higher neighbor detection (Figure B). Call source level had no effect (Figure C). Group geometry also influenced neighbor detection probability,but less than changing call parameters. Flying at larger interbat distances of 1.0 m leads to 0.31 times lower neighbor detection compared to denser groups with 0.5 m interbat distance (Figure D). Groups where individuals head in a more variable direction have 1.32 times better neighbor detection than groups with a generally common heading (or echolocation beam) direction (Figure E). Among the physical parameters, acoustic shadowing increased neighbor detection (without acoustic shadowing, neighbor detection is 0.75 times lower than with acoustic shadowing), while atmospheric attenuation had a negligible effect (Figure F and G) 2.4 Discussion We present a conceptual framework to quantify what a focal bat experiences in the sonar cocktail party nightmare. We quantified the probability of detecting neighbors across a range of group sizes, which allows calculating the rate at which a focal bat detects its neighbors. When flying alone, a focal bat will detect objects around it at a rate equal to its call rate, while in a group,its object detection rate is reduced due to masking. We show that even in a group of 100 bats, bats still detect at least 1 neighbor per call about 3 times per second (for a 10 Hz call rate), while in smaller group sizes, neighbor detection rate is larger at 5 to 10 Hz. Bat echolocation is generally “stroboscopic,”meaning that information is received intermittently with time gaps (D. R. Griffin (1958)). We suggest that bats in smaller group sizes still experience a sufficiently high information update rate for performing collision avoidance and neighbor following. With increasing group size, perception might become “hyper-stroboscopic,”i.e., so scarce that different sensorimotor heuristics might be required to maintain group coordination. The low level of masking at smaller group sizes allows the focal bat to detect all its neighbors per call. With increasing group size, however, the focal bat detects maximally 1 neighbor per call in a group of 100 bats. This neighbor detection rate of at least 1 neighbor per call even in large group sizes provides a formal sensory basis for group movement in active sensing animals. While a bat in a large group cannot track the position of all its neighbors, it still can track the movement of a few neighbors, specifically those close to and in front of it. This reduction in rate, range, and direction of detected neighbors has predictive consequences for the kind of collective behavior bat groups may show in nature. Many models of collective movement assume that each individual in a group detects the position and orientation of neighbors in the whole of its sensory volume, and then performs an averaging across all neighbors to decide its next movement (Couzin et al. (2002),Grégoire and Chaté (2004),Vicsek et al. (1995),Reynolds (1987)), leading to the impressive coordinated behaviors of fish schools and insect swarms (Sumpter (2006),Vicsek and Zafeiris (2012)). As the number of neighbors that an individual detects decreases, more “limited interactions” begin to dominate, causing anisotropy in the group structure (Bode, Franks, and Wood (2011),Ballerini et al. (2008)). For bats in the cocktail party nightmare, we predict that large groups may show higher anisotropy than smaller groups due to the limited number of neighbors that they can detect and react to. All things being equal, we predict that in large groups (&gt;50 bats), the neighbors in the frontal field of a bat will have a disproportionate influence on its movement decisions. Bats in larger groups may thus maintain higher alignment with their frontal neighbors compared to bats in smaller groups. Our simulations allow for a direct quantitative comparison of the effects of echolocation, group geometry, and acoustic parameters in group echolocation. Among the call parameters tested, reducing call rate (increasing interpulse interval) was most effective in increasing neighbor detection in jamming conditions, matching experimental evidence for reduced calling rate in Tadarida brasiliensis (Jarvis, Jackson, and Smotherman (2013), Adams, Davis, and Smotherman (2017)). In contrast, other FM bat species increase their call rates in groups and background noise(Amichai, Blumrosen, and Yovel (2015),Lin, Abaid, and Müller (2016),Cvikel, Levin, et al. (2015),Luo et al. (2015)). Likewise, our result that shorter call duration should improve neighbor detection is opposite to experiments showing that most bat species increased call duration in the presence of maskers (11, 23, 24, 43, 44), except (Cvikel, Levin, et al. (2015)). Lastly, our result of no effect of changing source level on neighbor detection might also seem to differ from experimental data showing that bats in laboratory conditions do increase source level in the presence of maskers (Amichai, Blumrosen, and Yovel (2015),Tressler and Smotherman (2009),Luo et al. (2015),Hase et al. (2016)). While there might be species-specific variation, we suggest that these differences are mostly due to the experimental situation. Bats in these experiments experienced constant maskers. Calling more often, for longer, and louder thus improved the bats’ signal redundancy, echo-to-masker ratio, and overall echo detection. In contrast, our model simulates group flight of many bats with simultaneous and uniform changes in their call parameters. When all bats in a group shorten call duration, this reduces the overall duration of masking sounds, thus improving echo detection. Likewise, when all bats in a group increase their call amplitudes to optimize their own echo-to-masker ratios, all bats will eventually call at their maximum, with no overall effect on neighbor detection. Analyzing bat calls in mass emergences is technically challenging and it remains unknown whether T. brasiliensis and other gregarious bat species reduce their call rate in the field. Bat aggregations show a variety of structures across behavioral contexts, from well-aligned almost parallel flight during roost emergences, to more variable and less-aligned flight in mating swarms and when circling in limited cave volumes. We show that this group structure itself affects how well bats can detect each other. Bats detect their neighbors better in less-aligned groups compared to more aligned groups. During aligned emergence flight, the focal bat always receives loud forward-directed masking calls from bats behind it, in addition to the relatively loud side-calls emitted by neighbors to its left and right. In contrast, during less-aligned swarming flight, the relative orientation of the bats is more distributed and changing, with the focal bat experiencing a wider dynamic range of masker levels (i.e., louder and fainter masking calls originating from a wider range of angular directions). This increased dynamic masker range allows for better echo detection, as there will be drops in echo-to-masker ratios due to changing received masker level. This effect is beneficial for enabling swarming flight, as the collision risk in less-aligned flight is likely higher compared to the more aligned emergence flights. Inter-individual distance is another parameter of group structure,and we show that neighbor detection is better in dense groups. This might seem unexpected given that the received SPL of the maskers is higher the closer the bats are to each other. However, received echo levels are also higher when bats are closely spaced. Since echo SPL drops by 12 dB per doubling of distance, but masker call SPL only by 6 dB per doubling of distance, the echo-to-masker ratio is higher at shorter compared to longer inter-bat distances. It would be interesting to examine if perhaps large groups in the field actually fly closer to each other than smaller groups. While we only modeled neighbor detection for the central-most bat in a group, its position in the group (e.g., central, frontal, or at the back) is likely to also have an effect on the number and received level of maskers, and thus on the number of detected echoes. However, we expect the obtained trends to remain qualitatively the same regardless of focal bat position. Particularly, we predict that masking will increase with group size, and only the exact group size at which a given level of masking (e.g., X% neighbor detection probability) is obtained will change depending on the focal bat’s position in the group. We furthermore show that it is important to consider bats not only as sources of reflected echoes and masking sounds, but also as obstructions to sound that actually alleviate the cocktail party nightmare. Typically, the detected echoes originate from nearby bats and are not shadowed. In contrast, the masking calls and secondary echoes can arrive from distant neighbors, thus passing by multiple other bats. Shadowing thus consists of the overall reduction in masker levels, which increases echo-to-masker ratios for the comparatively loud echoes returning from nearby neighbors. Our results show that the cocktail party may not be as much of a “nightmare” as previously thought (Ulanovsky and Moss (2008)). We show that the modeled psychoacoustic, spatial, and acoustic properties act together to alleviate the nightmare into a challenge. When bats are flying in a multi echo environment, our results show that a bat will always hear some echoes after a call emission, and very rarely no echoes at all. This parallels the phenomenon of auditory “glimpsing” reported in the human auditory cocktail party where individuals may follow conversations by perceiving parts of detected speech rather than whole sounds (Miller and Licklider (1950)). 2.4.1 Improved Echo Detection in Real-World Situations We present a first approximation to the sonar cocktail party nightmare, including many relevant biological, physical, and auditory mechanisms. Bats are expert echolocators and can detect echoes and fly under challenging conditions (Møhl and Surlykke (1989), Surlykke (1992),Petrites et al. (2009),Bates, Stamper, and Simmons (2008)). Bats rapidly adjust their call behavior in terms of their call duration, source level, and interpulse intervals (Luo and Moss (2017), Corcoran and Moss (2017)), integrate echoic information over multiple call emissions (Simmons and Gaudette (2012)), and actively track objects by aiming their calls at them (Ghose et al. (2006), Ghose and Moss (2006)). While we tested a range of differentecholocation call parameters, our model implemented these parameters as fixed values that do not vary over time, thus lacking the dynamic nature of a real bat in the wild. Furthermore, we did not model the spectral content of echo ormasker sounds, and analyzed echo detection based on a fixedthreshold of echo-to-masker-ratio. In contrast, real echolocation calls possess a time-variant spectral pattern that is species and even individual specific (Gillam et al. (2010), Yovel et al. (2009)), which can reduce echo masking. Masking is strongest when target and masker overlap both intime and in frequency (i.e., fall within the same critical band ofthe auditory system) (Ebata (2003), Fletcher (1940)). The frequency-modulation of bat calls means that even when maskers and echoes partially overlap in time, they will not necessarily overlap in frequency, thus reducing the likelihood of masking. The individuality of bat calls may help a bat reject the secondary echoes from other bats’ calls by forming separate auditory streams (Fay (2008)) for its own echoes and others’ echoes. Given the scarcity of empirical data to parametrize the effect of spectral differences on echo detection in masking conditions, we did not include it in our model, thus simulating a conservative worst case scenario where all sounds lie in the same frequency band. Additionally, attentional processes strongly improve target detection by improving the signal-to-noise ratio in the presence of maskers with similar time-frequency structure (Hafter, Sarampalis, and Loui (2008)). Under real-world conditions, it is likely that masking in groups is even less than simulated here. Due to the scarcity of published data, the inter-individual and interspecific variation in the temporal and spatial masking functions used in our model is unknown. The temporal masking envelope will arguably be similar in many bat species, showing the typical mammalian pattern of worse target detection threshold with shorter temporal separation between target and masker. Spatial unmasking occurs through the nonlinear interaction of pinnae shape, cochlear and higher auditory processing (Ebata (2003), Culling and Stone (2017)). As pinna shape and associated acoustic receiver characteristics strongly vary in echolocating bats (Obrist et al. (1993)), this will lead to species-specific spatial unmasking and echo detection rates in the sonar cocktail party nightmare. 2.5 Conclusion We provide a conceptual framework to explain how active sensing animals such as echolocating bats successfully navigate in groups despite mutually jamming each other. The intense jamming in groups might lead to individuals only detecting their nearest frontal neighbors, which might drive limited interactions within a group. We also show that call parameters and group geometry determine the challenge in the sonar cocktail party nightmare. Recent advances in on-body acoustic tags (Cvikel, Levin, et al. (2015), Stidsholt et al. (2019)), signal analysis(Aodha (2018)), and acoustic tracking (Seibert et al. (2015)) of echolocating animals in the field might facilitate future experimental validation of our model predictions. As our model formulation is not constrained to echolocation in bats, it can be parametrized to other echolocators such as oilbirds, swiftlets, and odontocetes (Brinkløv, Fenton, and Ratcliffe (2013), Surlykke et al. (2014)) that also echolocate in groups and suffer from cocktail-party–like conditions. 2.5.1 Acknowledgements We thank the members of the Acoustic and Functional Ecology Group for insightful comments and support, Claire Guérin for contributing to code development, the Max Planck Institute for Ornithology for excellent research infrastructure, and 2 anonymous reviewers for helpful comments. T.B. was funded by a doctoral fellowship from the German Academic Exchange Service (DAAD) and the International Max Planck Research School for Organismal Biology. H.R.G. was funded by the Emmy Noether program of the German Research Foundation (DFG, GO 2091/2-1, GO 2091/2-2).The simulation runs in this paper were funded by a Google (Research Credits) grant to T.B. 2.6 Supplementary Information 2.6.1 Model parametrization Here, we present the details of how we parametrized our model of the sonar cocktail party nightmare, based on empirical data of behavioral studies in bats and our own measurements. 2.6.1.1 Temporal masking envelope We derived the echo-to-masker sound pressure level (SPL) ratios for forward, backward and simultaneous masking from two empirical target-detection studies in echolocating bats (Table ??). We only chose studies where the target and masker were co-located along the same direction. Both studies presented the ratio between the echo and masker SPL at target detection for various delays between echo and masker arrival time. We linearly interpolated (in a piecewise fashion) the echo-to-masker SPL ratios between each of the time delays measured in the studies to obtain the full temporal masking envelope ranging from -0.65 and +24 ms delay of the target echo relative to the masker edge (Figure ). 2.6.1.2 Spatial unmasking function Sümer et al. (2009) performed a backward masking study to address spatial unmasking in the bat Eptesicus fuscus. In a two-alternative forced-choice paradigm, they increased the angular separation between a target object and a masker object while also varying the level of the target object’s echo (by varying the size of the target object and thus its target strength). We define the spatial unmasking function as the echo-to-masker SPL ratio at just-noticeable echo detection as a function of angular separation. To obtain the echo-to-masker level ratios, we subtracted the target object’s target strengths from the masker object’s target strength. We normalized the spatial unmasking function to the co-localised echo-masker case (i.e., when both echo and masker arrive from the same direction). This describes the reduction in echo-to-masker ratio required for echo detection as a function of angular separation between target and masker,compared to the co-localized case. We digitized the data points from Figure B of Sümer et al. (2009) by hand with WebPlotDigitiser (Rohatgi 2015) to obtain the target’s target strength as a function of angular separation. Masker target strength was given by Sümer et al. (2009) as -14.5 dB. We then calculated the target-masker SPL ratios and interpolated them with a quadratic polynomial fit (Figure ). The interpolated data was then further upsampled to 0.47° intervals. As Sümer et al. (2009) only measured angular separations up to 23°. We conservatively used the echo-masker SPL ratio at 23° also for all larger angular separations. 2.6.1.3 Call and hearing directionality Echolocation calls have a directional beam shape, meaning that the emitted SPL generally decreases with increasing angular distance from the main call direction, which has the highest call SPL (Figure ). The highest call SPL is typically towards the front, and reduces towards the back of the bat. Despite this directionality and additional variation with call frequency and behavioral context (Jakobsen and Surlykke 2010, @l2013a, @surlykke2012a, @giuggioli2015a) , bats still emit a significant amount of sound pressure into the backward direction. The average call SPL behind a bat is about 14 dB lower than in the forward direction (Giuggioli, McKetterick, and Holderied 2015, @stidsholt2018a). Call directionality leads to a drop in the effective number of masking calls from neighbors as only those calls arriving from a limited range of directions will have sufficiently high SPL (Figure ). For example, in an emergence situation with approximately parallel flight directions, the focal bat will receive the loudest calls from those bats flying behind it. Similarly, the lowest received call levels in an emergence will be from those bats flying in front of the focal bats. Like call production, hearing is also directional. The pinna structure of a bat attenuates or amplifies the same sound depending on its direction of arrival (Firzlaff and Schuller 2003, @f2008a). In Myotis daubentonii, hearing directionality between 35-45 kHz leads to an average amplification of frontally arriving sounds by 4 dB in comparison to those arriving from behind. We used data of Giuggioli et al (2015) to describe the average call and hearing directionality of our modelled bats (Figure ). 2.6.1.4 Atmospheric attenuation Ultrasound in air is heavily attenuated by atmospheric attenuation, even over short distances of a few meters (Goerlitz 2018, @lawrence1982a). Atmospheric attenuation will reduce the received SPL of a masker or echo at the focal bat. We chose a range of values for the atmospheric attenuation coefficient α between 0 to -2 dB/m. These values approximate the atmospheric attenuation experienced by a bat calling at very low (\\(\\leq\\) 20 kHz, 0 dB/m) to high (60 kHz, -2 dB/m) peak frequencies. 2.6.1.5 Geometric attenuation Sound pressure level reduces with increasing distance from the source, called geometric attenuation. For all sounds in our model (target echoes, masking calls and secondary echoes), we implemented spherical geometric spreading, i.e., uniform spreading of sound in all directions (Speaks 1996). 2.6.1.6 Group geometry A group of bats might organize themselves tightly or well spread in the field. The spacing between bats will decide how loud the returning target echoes, masking calls and secondary echoes are. We simulated a group of bats by placing individual bats on a 2D plane using the Poisson disk algorithm (Bridson 2007). The advantage of using the Poisson disk algorithm is that points are spaced relatively uniformly in space compared to a random placement of points from two independent distributions. The other advantage of the Poisson disk algorithm is that it allows the specification of a minimum distance between two points. For the first simulations varying group size only, we chose 0.5 m as inter-bat distance (see Table ??, main text), matching the average interbat-distance in dense swarms of T. brasiliensis in the field (Theriault et al. 2010). In addition to 0.5 m minimum inter-bat distance, we also studied how a sparser 1.0 m minimum inter-bat distance affects neighbor detection (see Table ??, main text). The Poisson disk arranged bats showed average inter-bat distances of between 1-1.5 times the specified minimum distance between points. 2.6.1.7 Heading variation Active sensing animals are known to ‘scan’ their environments by emitting energy in varying directions of interest according to the behavioral context (Wisniewska 2015, @bullock2005a). Bats alter the shape and direction of their sonar beam while they fly (Jakobsen and Surlykke 2010, @ghose2006a, @w2017a). The directions into which each bat in a group aims its calls could affect how well each bat in the group can detect echoes. A group of bats calling into the same direction may experience high masking, as a focal individual will receive many loud calls from the bats behind it. In contrast, a group of bats calling into a larger range of directions may experience less masking. The focal bat may receive a mix of fainter off-axis calls and loud on-axis calls from neighbors. We simulated the scanning behavior of individual bats in the group by setting a heading angle for each individual. Each individual called into the direction of its heading angle, and we chose two levels of variation of heading angles in the group. Groups with a low heading variation were all pointing their beams in more or less the same direction. Groups with high heading variation were pointing their beams in a wider range of directions. A low heading variation simulates an emergence situation where each bat is calling approximately into the overall flight direction of the group. A high heading variation simulates a swarming situation where each bat is calling at a unique direction. Given the lack of empirical data to guide our estimates, we chose \\(\\pm\\) 10° for the low heading variation, and \\(\\pm\\) 90° for the high heading variation. The heading angle for each individual was randomly drawn from a uniform distribution covering the respective range. 2.6.1.8 Monostatic and bistatic target strength of a flying bat Quantifying the received levels of echoes and secondary echoes requires knowledge of the target strength of a bat when emitter and receiver are at the same and at different locations. Here, we measured monostatic and bistatic target strengths (Richards, J., and Holm 2010) of a flying stuffed Myotis myotis bat. Monostatic target strengths refer to the situation where the emitter and receiver are at the same location, i.e.,they are the same bat (this is the ‘classical’ target strength usually considered in echolocation research). Bistatic target strength refers to a situation where the emitter and receiver are at different locations, i.e., the receiving bat hears the echo of a call that was emitted by another bat, i.e. a secondary echo. In the simulations, all incoming and outgoing sounds at the bat are between abs(0-180)°. Sounds with 0° angle are along the heading direction of the focal bat. Sounds arriving/reflecting on the left have negative angles (0° \\(\\geq \\theta \\geq\\)-180°), and those on the right have positive angles (0° &gt; \\(\\theta\\) &gt;180°). Methods: We ensonified a stuffed Myotis myotis with outstretched wings, which was suspended from the ceiling at 1 m height and placed on a rotating base, which could be rotated in 45° steps. A speaker (electrostatic Polaroid, custom built) and microphone (CM16/CMPA, Avisoft Bioacoustics, Glienicke, Germany) were placed at a 1 m radial distance to the center of the bat (Figure ). The speaker emitted linear frequency modulated sweeps between 96-20 kHz, with durations of 170 \\(\\mu\\)s, 1 ms and 2 ms at 92 dB rms SPL re 20 μPa at 1 m. The speaker was driven by a custom-built amplifier with input from a soundcard (Player 216H, Avisoft Bioacoustics, 1 MHz sampling rate). The microphone signal was recorded simultaneously with an attenuated version of the speaker signal on a multichannel soundcard (USG 416H, Avisoft Bioacoustics, 500 kHz sampling rate). The microphone had a noise floor of 24 dB rms SPL re 20 μPa. All echoes were recorded at \\(\\geq\\) 22dB signal-to-noise ratio. The experiment was performed in the middle of a large empty room (4x4x2 m) to temporally separate bat echoes from background echoes. We ensonified the bat from front (0°) to back (180°) in steps of 45°. We assumed that the bat was symmetrical and thus did not ensonify angles from 180-360°. The angular separation between the speaker and the microphone was also altered in steps of 45° between -180° to +180°. This resulted in 40 target strength measurements (5 sound directions x 8 angular separations). The integrated target strength (Cook 1985) of the recordings were calculated by subtracting the energy of recordings with the bat from those without the bat at the expected time window of echo arrival. The echo level was calculated in rms by taking the square root of the energy. Results: The monostatic target strength of a flying stuffed Myotis myotis bat at various orientations was between -43 and -34 dB at 1 m distance, matching the general range of previously published values (Götze et al. 2016). The bistatic target strength, which was used to calculate the received level of the secondary echoes, was between -44 and -10 dB across all combinations of emitter-receiver locations. For further details on experimental protocol, raw data and reproduction of generated results, please refer to the archived Jupyter notebooks at this link: https://doi.org/10.5281/zenodo.3469845 . 2.6.1.9 Acoustic shadowing in bat groups with varying number of bats and inter-bat spacing As multiple bats fly together in a group, the bats themselves will block all sounds travelling between an emitter and a receiver. Essentially, the bats themselves act as obstacles that cause acoustic shadowing, reducing the received sound pressure level at the focal bat. In a large group, multiple bats may shadow a sound as it moves from the emitter and to the receiver. We quantified acoustic shadowing in a series of playback experiments that varied the inter-bat spacing (0.5 and 1.0 m) and the number of bats (1 – 6) in a line. Methods: A microphone (CM16/CMPA, Avisoft Bioacoustics) and speaker (Polaroid, custom-built) were placed at a fixed distance of 9.9 m apart, facing each other. We hung 1 to 6 “model bats” made of foam with paper wings at 0.5 or 1.0 m distance to each other from a string running above the speaker to the microphone. The designed model bat showed acoustic shadowing similar to that of the stuffed Myotis myotis used in the target strength measurements described in . The speaker was placed as far as possible from the microphone to calculate acoustic shadowing without the effects of speaker directionality. The speaker played back a variety of 7 ms Tukey windowed signals consisting of pure tones (20, 35, 50, 100 kHz) and a downward modulated linear sweep (100-15 kHz). Each signal type was played back 15 times at 4% duty cycle. Multiple signal types were used to obtain a generalized estimate of shadowing across a wide range of call peak frequencies and call types. The playback signals and recordings are available here: https://doi.org/10.5281/zenodo.3469845. Additionally, we also recorded the same playback without model bats being present. We calculated acoustic shadowing as the reduction in received level by subtracting the received level (in dB rms) without bats from the received level with bats. We performed a linear regression of attenuation as a function of factors number of bats and inter-bat-distance, to estimate the amount of acoustic shadowing caused per bat and the spacing between them. Results: Bats effectively shadowed the sound, with strong effects of the inter-bat-spacing and the number of bats. Bats at 0.5 m distance in front of the receiving bat (=microphone) reduced the received SPL by 5.17 dB (SEM=0.44, t=-11.639, 95% CI =-6.05,-4.30), while bats at 1.0 m interbat-spacing reduced the received SPL by 1.85 dB (SEM=0.44, t=-4.164, 95% CI =-2.72,-0.98). Each bat reduced received SPL by 0.83 dB (SEM=0.08, t=-9.852, 95% CI =-0.99,-0.66). For further details on experimental protocol, raw data and reproduction of generated results, please refer to the archived Jupyter notebooks at this link: https://doi.org/10.5281/zenodo.3469845. 2.6.2 Model implementation Here, we present how we implemented the parameters described before into our final model, and how our model was initialized and run. 2.6.2.1 Model idea The idea of our model is to analyze the relative timing and sound pressure level of target echoes, masking calls and secondary echoes at a focal bat flying in a group of other bats. Each model iteration thus analyzed one single interpulse interval, i.e., the time after emission of one call until the emission of the next call by the focal bat. Within that interpulse interval, the focal bat received the echoes from its own call that reflected off the neighboring bats, the calls of those neighboring bats, and the secondary echoes which originate from the calls of the neighboring bats reflecting off other neighboring bats (Figure , main text). We placed groups of bats in a 2D plane with various inter-bat distances and heading directions. We then calculated received timing and SPL of all sounds based on realistic assumptions about call properties, mammalian auditory characteristics and sound physics. All echoes, calls and secondary echoes were considered to be equal in duration, amplitude envelope, and frequency composition. Frequency composition was not explicitly specified, which is a conservative modelling choice that maximizes masking potential (Yost 2007) and makes our model generalizable to multiple bat species. All sounds were treated as having a constant amplitude envelope (i.e., no amplitude modulations), but they differed in the sound pressure level received by the focal bat. 2.6.2.2 Model initialization Each model iteration consisted of distributing bats in a 2D plane and assigning each bat a heading direction. This spatial distribution was used to calculate the arrival times and received level of target echoes, masker calls and secondary echoes within the interpulse interval (Figure ). The interpulse interval was discretized into time bins of 1 \\(\\mu\\)s duration. Each received target echo corresponded to one neighbor. The arrival time of each echo was calculated using twice the distance between focal and neighboring bat. The arrival time of masker calls and secondary echoes were chosen randomly. The random arrival time assignment of masker calls and secondary echoes is supported by the finding that groups of Miniopterus fuliginosus (Hase 2018) do not coordinate their calling behavior, and seem to echolocate independently. Moreover, at large group sizes beyond a few bats it is unlikely that bats could effectively co-ordinate their call emission times. 2.6.2.3 Target echo properties Target echoes are the echoes that the focal bat receives in response to its own echolocation call. In our model, the target echoes are echoes reflected off the neighboring bats. When a focal bat hears a target echo it means it has detected the corresponding neighboring bat. An echo was defined as a sound occupying a block of time within the interpulse interval (Figure A). Echoes were simulated to arrive at delays corresponding to the distance to the neighboring bat they reflected off, e.g. if a neighboring bat was at 1 m distance to the focal bat, then its echo arrived at a delay of 6.06 ms (at 330 m/s sound propagation). The received level of the returning echo was calculated based on emitted call source level into the direction of the neighboring bat, our monostatic target strength measurements of a bat, and geometric attenuation over the sound travel distance. If acoustic shadowing and atmospheric absorption were included in a simulation run, the received level was reduced based on the number of bats in the path and the atmospheric attenuation for the overall distance travelled by the echo. Echo arrival direction was determined based on the position of each neighboring bat. 2.6.2.4 Masker call properties Masker calls arrived at random time points with uniform probability within the interpulse interval (Figure B), based on the observed lack of call synchronization in groups of Miniopterus fuliginosus (Hase 2018). Call directionality was based on the directionality function in Giuggioli et al., 2015, who fit a cosine based function to describe the overall call directionality of Myotis daubentonii echolocating in the field. We set the asymmetry parameter A to 7.0. We calculated the angle of call emission towards the focal bat for each conspecific bat based on its angular position (heading) and distance. We then calculated the effective source level into the direction of the focal bat by reducing the call’s on-axis source level (Table ?? in main text) according to the call directionality function and the focal bat’s relative position to the conspecific (Figure ). This reduced level was the final received level of the conspecific masker call. If acoustic shadowing and atmospheric attenuation were included in a simulation run, the received level was reduced based on the number of bats in the path and the overall distance travelled by the call. 2.6.2.5 Secondary echo properties Like the masking calls, secondary echoes arrived randomly with uniform probability in the interpulse interval (Figure C). The received level of a secondary echo was based on the emitted call source level into the direction of the neighboring bat, our bistatic target strength measurements of a bat, and geometric attenuation over the sound travel distance. If acoustic shadowing and atmospheric absorption were included in a simulation run, the received level was reduced based on the number of bats in the path and the overall distance travelled by the secondary echo. 2.6.2.6 Obtaining the masker sound pressure level profile All sounds were treated as having a fixed received level (no envelope modulations). For each target echo, we calculated its unique masker SPL profile based on the relative timing, relative arrival directions and received levels of all asking calls and secondary echoes. This masker SPL profile was different for each target echo because the temporal and spatial properties of the masking sounds differ for each echo, resulting in different received levels and spatial unmasking (see main text for details). We first calculated the effective masker SPL for each masking sound by correcting for spatial unmasking based on the angular separation between the echo and the masker. All effective masker SPLs of all masking sounds together over time represent the complete masker sound pressure profile for each target echo (Figure E). When two or more maskers overlapped in time, we added their linear sound pressures to obtain their joint masking SPL. This approach assumes that overlapping maskers are coherent sound sources that constructively interfere. This is a conservative assumption that will maximize masking. 2.6.2.7 Determining neighbor detection: the temporal masking envelope The masker SPL profile for each echo describes the received masking SPL over time. From the masker SPL profile, we created an echo-to-masker ratio profile by normalizing the SPL of the target echo to the masker SPL profile: echo-to-masker ratio profile (dB) = echo level (dB SPL) – masker sound pressure level (dB SPL) The echo-to-masker-ratio profile is comparable to a signal-to-noise-ratio: at 0 dB, echo and masker have the same SPL. The masker is louder than the echo for negative values, and the echo is louder than the masker for positive values. To determine whether a given target echo was heard or not, we compared the echo-to-masker ratio for this echo with the temporal masking envelope (see ). The temporal masking envelope describes the echo-to-masker ratio at which masking occurs as a function of relative timing between echo and masker. Using the temporal masking envelope is important because masking does not only occur when the masker coincides with the echo, but also when the masker does not overlap with the echo and arrives before (forward masking) or after (backward masking) it. In our case, echo and masker had durations of only 1-2.5 ms, while a masker arriving at up to 25 ms before and up to 1 ms after the echo still causes some amount of masking. Thus, our temporal masker envelope had a duration of either 27 or 28.5 ms (Figure F). We compared the echo-to-masker ratio profile to the temporal masking envelope. The echo was considered not heard if the echo-to-masker ratio profile lay below the temporal masking envelope, i.e., the echo-to-masker ratio was lower than required for echo detection. Alternatively, the echo was considered heard if the echo-to-masker ratio profile lay above the temporal masking function, i.e., the echo-to-masker SPL ratio was higher than required for echo detection. However, as the echo-to-masker ratio continuously fluctuates over time, it is possible that it is not fully above or below the temporal masking envelope throughout the envelope’s duration. We thus defined an echo to be masked (= not heard), if it was masked for more than 25% of its duration (of 1 or 2.5 ms). To calculate the total duration of masking, we analyzed the total duration that the echo-to-masker ratio was below the temporal masking envelope. As long as the total masking duration was shorter than 25% of the echo duration (of 1-2.5 ms) the echo was considered detected. If this duration was longer than 25% of the echo duration, the echo was masked and the corresponding neighboring bat was considered not detected. This 25% threshold was set to make the simulated auditory system immune to short spikes in masking sound pressure level occurring during the temporal masking function. 2.6.3 Open-source software used in the research All simulation code, experimental data and results were made possible through the use of the NumPy (T. E. Oliphant 2006), SciPy (Virtanen 2019), Pandas (W. McKinney 2010), Matplotlib (J. D. Hunter 2007), Statsmodels (Seabold and Perktold 2010), sounddevice (Geier 2015), Anaconda (Anaconda 2016) and CPython (Van Rossum 1991) open-source projects. 2.6.4 Acknowledgements We thank Renate Heckel and Felix Hartl for contributing to and building the ensonification setup, Magnus Wahlberg for helpful discussions on the ensonifications, Henrik Brumm for permission to use Raum 1.03 for the ensonification experiments, and Mihai Valcu for facilitating simulation runs on the in-house server facility. 2.6.5 Supplementary Schematics, Tables and Figures Pseudo-code of the steps in a simulation run to determine the detected neighbors per call emission. References "],
["horseshoe-bat-craziness-paper.html", "Chapter3 Horseshoe bat craziness paper", " Chapter3 Horseshoe bat craziness paper Here we describe a whole series of crazy experiments and results with horseshoe bats. "],
["ushichka.html", "Chapter4 ushichka 4.1 Example one 4.2 Example two", " Chapter4 ushichka Some significant applications are demonstrated in this chapter. 4.1 Example one 4.2 Example two "],
["robust-self-calibration-of-constant-offset-time-difference-of-arrival.html", "Chapter5 Robust Self-Calibration of Constant Offset Time-Difference-of-Arrival Abstract 5.1 Introduction 5.2 Time-difference-of-arrival self calibration", " Chapter5 Robust Self-Calibration of Constant Offset Time-Difference-of-Arrival This chapter was published as a peer-reviewed paper in the conference proceedings of the International Conference on Acoustics, Speech, and Signal Processing: Batstone, K., Flood, G., Beleyur, T., Larsson, V., Goerlitz, H. R., Oskarsson, M., &amp; Åström, K. (2019, May). Robust self-calibration of constant offset time-difference-of-arrival. In ICASSP 2019-2019 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP) (pp. 4410-4414). IEEE. Abstract In this paper we study the problem of estimating receiver and sender positions from time-difference-of-arrival measurements, assuming an unknown constant time-difference-of-arrival offset. This problem is relevant for example for repetitive sound events. In this paper it is shown that there are three minimal cases to the problem. One of these (the five receiver, five sender problem) is of particular importance. A fast solver (with run-time under \\(4~ \\mu s\\)) is given. We show how this solver can be used in robust estimation algorithms, based on RANSAC, for obtaining an initial estimate followed by local optimization using a robust error norm. The system is verified on both real and synthetic data. 5.1 Introduction The problem of estimating receiver-sender node positions from measured arrival times of radio or sound signals is a key issue in different applications such as microphone array calibration, radio antenna array calibration, mapping and positioning. This field is well researched but in this paper we will focus on the anchor-free sensor network calibration both in terms of time-of-arrival measurements (TOA) and time-difference-of-arrival measurements (TDOA). For time-of-arrival the planar case of three receivers and three senders (3R/3S) was solved in . For the full 3D case the over-determined problem (10R/4S) was studied in , where a solver for this non-minimal case was provided. There are actually three minimal cases for the 3D case, namely (4R/6S), (5R/5S) and (6R/5S). A practical solver was presented in . There are in general \\(38\\), \\(42\\) and \\(38\\) solutions respectively for the three different set ups. Faster solvers for these minimal cases were provided in . In this paper we study the constant offset TDOA self-calibration problem. It is a problem that naturally arises e.g. when signals are emitted with a known period. As an estimation problem it lies between TOA and full TDOA. In the paper we study the minimal (5R/5S) problem and provide a fast (few \\(\\mu s\\)) solver. Robust parameter estimation often use the hypothesize and test paradigm, e.g. using random sampling consensus, or one of its many variants (). In these frameworks minimal solvers are important building blocks for generating model hypotheses, and we show in the paper how a minimal solver can be used for robust parameter estimation of sender positions, receiver positions and unknown offset. The system is capable of handling missing data, outliers and noise. The algorithms are tested on synthetic data as well as real data, in an office environment and in a cave.The methods are straightforward to generalize for degenerate configurations which arise if senders or receivers are restricted to a plane or to a line. 5.2 Time-difference-of-arrival self calibration The problem we are considering involves \\(m\\) receiver positions \\(\\mathbf{r}_i \\in \\mathbb R^3\\), \\(i = 1, \\dots, m\\) and \\(n\\) sender positions \\(\\mathbf{s}_j \\in \\mathbb R^3\\), $ j = 1, , n$. This could for example represent the microphone positions and locations of sound emissions, respectively. Assume that the arrival time of a sound \\(j\\) to receiver \\(i\\) is \\(t_{ij}\\) and that the time that sound \\(j\\) is emitted is \\(T_j\\). Multiplying the travel time \\(t_{ij} - T_j\\) with the speed \\(v\\) of the signal we obtain the distance between senders and receiver, \\[\\begin{equation} v (t_{ij}-T_j) = {\\norm{\\mathbf{r}_i - \\mathbf{s}_j}}_2 , \\label{eq:tdoa} \\end{equation}\\] where \\({\\norm{.}}_2\\) is the -norm. The speed \\(v\\) is throughout the paper assumed to be known and constant. In many settings the times of emissions \\(T_j\\) are unknown, but regular, \\[\\begin{equation} T_j = k_1 j + k_0, \\label{eq:regular} \\end{equation}\\] where the interval \\(k_1\\) is known. Inserting into we obtain \\[\\begin{equation} v (t_{ij}-k_1 j - k_0) = {\\norm{\\mathbf{r}_i - \\mathbf{s}_j}}_2 . \\end{equation}\\] Assuming an erroneous (but regular) emission time \\(\\tilde{T}_j = k_1 j + \\tilde{k}_0\\) and introducing (the measured) \\(z_{ij} = v (t_{ij}-\\tilde{T}_j)\\) and (the unknown) \\(o = v (k_0-\\tilde{k}_0)\\) yields the following expression \\[\\begin{equation} z_{ij} = {\\norm{\\mathbf{r}_i - \\mathbf{s}_j}}_2 + o. \\end{equation}\\] Note that this is a simplified variant of the general time-difference-of-arrival problem (see ), which allows for a different offset \\(o\\) for every \\(j\\), \\[\\begin{equation} z_{ij} = {\\norm{\\mathbf{r}_i - \\mathbf{s}_j}}_2 + o_j. \\end{equation}\\] Here we will use the set \\(\\Win\\) for the indices \\((i,j)\\) corresponding to the inlier measurements and \\(\\Wout\\) for the indices corresponding to the outlier set. If an initial estimate of the parameters \\(\\theta_1 = \\{ R, S, o \\}\\) is given and if the set of inliers is known, then refinement of the estimate can be found by optimization methods, Levenberg-Marquardt (LM) (), \\[\\begin{equation} \\min_{\\theta_1} f(\\theta_1) = \\sum_{(i,j) \\in \\Win} (z_{ij} - ( {\\norm{\\mathbf{r}_i - \\mathbf{s}_j}}_2 +o) )^2 . \\end{equation}\\] There is an interesting relaxation to the problem, that exploits the fact that the matrix with elements \\((z_{ij}-o)^2\\) is rank \\(5\\), (). Further simplifications use the double compaction method (). The double compaction matrix \\(M\\) is defined as the matrix with elements \\[\\begin{equation} M_{ij}=(z_{ij}-o)^2 -a_i-b_j, \\label{eq:dc} \\end{equation}\\] and it can be shown to have rank \\(3\\), i.e. \\(M = U^T V\\), where \\(U\\) is of size \\(3 \\times m\\) and \\(V\\) is of size \\(3 \\times n\\). The relaxed problem involves a set of parameters \\(\\theta_2 = \\{ U, V, b, a, o \\}\\). Here the constraints can be written as \\[\\begin{equation} z_{ij} = \\sqrt{u_i^T v_j + a_i + b_j} + o , \\end{equation}\\] where \\(u_i\\) denotes column \\(i\\) of \\(U\\) and \\(v_j\\) denotes column \\(j\\) of \\(V\\). Refinement of parameters can be done by performing local optimization on \\[\\begin{equation} \\min_{\\theta_2} f(\\theta_2) = \\sum_{(i,j) \\in \\Win} \\left ( z_{ij} - ( \\sqrt{u_i^T v_j + a_i + b_j} + o ) \\right )^2 . \\label{eq:relaxed} \\end{equation}\\] By counting equations and unknowns, one finds that there are three minimal problems. The first two are the symmetric case when \\(m=4, n=7\\) or \\(m=7, n=4\\). This case is not addressed in this paper, but we believe it to be difficult to solve. The other case is \\(m=n= 5\\). Here, we first present a solver for the constant offset and then discuss how to solve for sender and receiver positions. Given a \\(5 \\times 5\\) matrix, \\(Z\\), with time-difference-of-arrival measurements \\(z_{ij}\\), the rank \\(3\\) constraint on the double compaction matrix in can be written as \\[\\begin{equation} f(o) = \\det ( C^T (Z-o)^{\\circ 2} C ) = 0, \\end{equation}\\] where \\[\\begin{equation} C = \\begin{pmatrix} -1 &amp; -1 &amp; -1 &amp; -1\\\\ 1 &amp; 0 &amp; 0 &amp; 0\\\\ 0 &amp; 1 &amp; 0 &amp; 0\\\\ 0 &amp; 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{pmatrix} \\end{equation}\\] and \\(^{\\circ 2}\\) denotes element-wise squaring (Hadamard power). Although the elements of \\((Z-o)^{\\circ 2}\\) are of degree 2 in \\(o\\), the quadratic terms cancel out after multiplication with \\(C^T\\) and \\(C\\). Thus the elements of \\(C^T (Z-o)^{\\circ 2} C\\) are linear in \\(o\\). Since the determinant is linear in each column, the determinant \\(f(o)\\) is a polynomial of degree four in the offset \\(o\\). This can be summarized as For each solution \\(o\\) it is possible to generate a solution \\(\\theta_2\\) to the relaxed problem, according to \\[\\begin{equation*} \\! b \\! = \\! \\begin{pmatrix} (z_{11} \\! - \\! o)^2 \\! \\! &amp; \\! \\! (z_{12}-o)^2 \\! \\! &amp; \\! \\! (z_{13}-o)^2 \\! \\! &amp; \\! \\! (z_{14}-o)^2 \\! \\! &amp; \\! \\! (z_{15}-o)^2 \\end{pmatrix} \\! , \\end{equation*}\\] \\[\\begin{equation} a = \\begin{pmatrix} 0 \\\\ (z_{21}-o)^2 -(z_{11}-o)^2\\\\ (z_{31}-o)^2 -(z_{11}-o)^2 \\\\ (z_{41}-o)^2 -(z_{11}-o)^2 \\\\ (z_{51}-o)^2 -(z_{11}-o)^2 \\end{pmatrix}, \\end{equation}\\] \\[\\begin{equation} U = \\begin{pmatrix} 0 &amp; u_2 &amp; u_3 &amp; u_4 &amp; u_5\\end{pmatrix}, \\end{equation}\\] \\[\\begin{equation} V = \\begin{pmatrix}0 &amp; v_2 &amp; v_3 &amp; v_4 &amp; v_5\\end{pmatrix} , \\end{equation}\\] where \\(\\begin{pmatrix}u_2 &amp; u_3 &amp; u_4 &amp; u_5\\end{pmatrix}^T \\begin{pmatrix} v_2 &amp; v_3 &amp; v_4 &amp; v_5\\end{pmatrix}\\) is any rank \\(3\\) factorization of the matrix \\(C^T (Z-o)^{\\circ 2} C\\). From a solution \\(\\theta_2\\) to the relaxed problem it is possible to upgrade to a solution \\(\\theta_1\\) to the original problem. This involves solving a system of polynomial equations. The procedure was first described in , where an algorithm for solving this was presented. Recently, a faster algorithm was presented in . An efficient implementation for calculating the four solutions of the offset \\(o\\) given the measurements \\(z\\) takes \\(4~ \\mu s\\) for a C++-implementation. Generating the solution \\(\\theta_2\\) to the relaxed problem adds a few \\(\\mu s\\). However, calculating a solution \\(\\theta_1\\) to the original problem takes another \\(22 ~ms\\). Thus, it is advantageous to estimate the parameters of the relaxed problem and postpone the upgrade from \\(\\theta_2\\) to \\(\\theta_1\\) as a final step, see Table . We propose the use of the fast minimal solver in an hypothesize and test framework to obtain (i) a initial estimate on the offset \\(o\\) and (ii) an initial inlier set. The steps are described in Algorithm~ We use these minimal solvers with RANSAC as described in the previous section to find one or several initial estimates of the parameters \\(\\theta_2\\) for a subset of five receivers and \\(k\\) senders. The solution is extended to additional rows and/or columns using robust techniques as described in . During this process it is useful to keep the errors down by occasionally refining the solutions using local optimization. This has shown to reduce failures, see e.g. (). In the proposed estimation algorithm we postpone the upgrade from \\(\\theta_2\\) to \\(\\theta_1\\) until we have found a good solution involving a large portion of the receiver and sender positions. To test the numerical accuracy and robustness of our minimal solver we conducted an experiment using simulated data without noise. We generated a large number of instance problems (10,000) with known offsets. We then ran our solvers and compared the returned solutions with the ground truth solution. For each instance problem we recorded the distance to the closest solution. In Figure the resulting histogram of the logarithm of the absolute errors are shown. As can be seen, both implementations get close to machine precision. We have tested our system on (i) experiments made in an office environment and (ii) experiments made at the Orlova Chuka cave, Bulgaria. For the office experiments, 12 microphones (8x t.bone MM-1, 4x Shure SV100) were positioned around a room (\\(\\sim 3 \\times 5~m^2\\)) and measured using a laser to obtain ground truth positions of the microphones with an error of \\(\\pm 2~ mm\\). The space was cleared of most the furniture to create an open space to conduct the experiment in. The sound recordings were captured using a Roland UA-1610 Sound Capture audio interface and automatically amplified. The recordings were made using the open source software Audacity 2.3.0 with a sampling frequency of \\(96~kHz\\) on a laptop. A synthetically generated chirp was then played using a simple loudspeaker every half second for \\(30~s\\) while moving the speaker around in the room. For the cave experiments, 12 microphones (4x Sanken CO-100K, 8x Knowles SPU0410) were positioned in a section of the cave, four microphones were placed on an inverted T array near one wall, while the other eight microphones were placed on the adjacent wall. The sound recordings were captured using pre-amplifiers (Quadmic, RME) and two synchronised Fireface 800 (RME) audio interfaces running at a sampling frequency of \\(192 ~kHz\\). Recording and playback were controlled via a custom written script based on the sound device library () in Python 2.7.12 (). Ultrasonic chirps (\\(8~ms\\), \\(16-96~kHz\\) upward hyperbolic sweep) were played every second via one of the audio interfaces, amplified (Basetech AP-2100) and presented through a Peerless XT25SC90-04 loudspeaker. The speaker was attached to a 3-m-long pole and slowly waved in the approximately \\(5 \\times 9 \\times 3 ~m^3\\) recording volume. Playbacks were done past 6:00 am to prevent disturbing the resident bat population. Once the office recordings were taken, an algorithm was used to find the chirps in the captured sound recordings and the algorithm then outputs the \\(z_{ij}\\) matrix. This can then be used in our RANSAC scheme, Algorithm~. For this experiment we used the (5R/5S) minimal solver. A fixed number of iterations was used; 100 iterations for the initial selection of 5 receivers and senders, then the extension to more columns and rows was allowed until there was no better solution. The tolerance was set to \\(T=0.01\\) for the initial selection and extension of rows and column. Once the initial values have been estimated, it underwent \\(l^{2}\\) optimization on the inlier set. The results of the estimated microphone positions after the optimization are shown in Figure . This produced an Euclidean distance error between each of the microphones calculated position and its ground truth position as 0.2016,0.0587,0.1444,0.1153,0.2017, 0.1326,0.1407, 0.1198,0.2041,0.2010,0.1908,0.2110) m. For graphical purposes, a Procrustes fitting was used on the microphone positions to spread the total error over all 12 microphones. In the Procrustes fitting only rotation and translation were allowed. For the cave experiment a similar scheme was devised and the results are shown in Figure . In this paper, a novel method has been constructed to efficiently solve a TDOA problem with a constant offset. This has been verified using simulated data to test the solver and real experimental data to test our algorithms in realistic scenarios. Looking at Figure and Table , it can be seen that the calculation of the offsets and the calculation of the relaxed form \\(\\theta_2\\) are very fast solvers without loss in numerical accuracy. The advantage of this is that when using a RANSAC approach, the iterations are performed quickly, giving a good initial estimate in which to optimize over, which is important in highly non-linear systems such as this. Looking at the results from the office experiment, Figure , we can see that the calculated microphone positions are accurate and the residuals are small, mostly in the range \\(\\pm 0.04~m\\). Further to this our inlier set appears to be accurate. The first and last few columns (corresponding to sound emissions) are not used in our initialisation. This is correct because the recording started before the chirps were sounded and ended after, so the chirp detection algorithm falsely determined that they were also chirps but our method decided that the data in those regions do not fit the model. A comparison of the calculated microphone positions were made to a solution from a Full TDOA system, (), which produced similar results and very similar residuals. This provided a sanity check that the chirp detection was working correctly and that from this dataset a better solution could not be found. For the cave experiment, similar conclusions can be made, since the residuals are very low, we can conclude that we have an accurate model. This gives a real life example of how algorithms such as the one proposed can be used. For future work, the study of the number of inliers could be of use. At the moment our algorithm may not extend to more rows and columns if the initial solution is poor, perturbing our final solution. Perhaps a method which could adapt the initial selection in order to give a required amount of inliers could be more advantageous. "],
["tacost-testing-and-simulating-the-performance-of-acoustic-tracking-systems.html", "Chapter6 tacost: Testing and simulating the performance of acoustic tracking systems Abstract 6.1 Introduction 6.2 Statement of need 6.3 Design 6.4 Examples 6.5 Future directions 6.6 Acknowledgements", " Chapter6 tacost: Testing and simulating the performance of acoustic tracking systems This chapter was published as a preprint on biorXiv: Beleyur, T. (2020). tacost: Testing and simulating the performance of acoustic tracking systems. bioRxiv 2020.06.22.165308; doi: https://doi.org/10.1101/2020.06.22.165308 Abstract tacost is a Python package to allow the testing of acoustic tracking systems. While many microphone array systems have been characterised analytically and experimentally - these are time-intensive methods. tacost provides a simulation based framework to rapidly assess the tracking behaviour of multiple array geometries, and the dissection of other relevant parameters. This paper explains briefly the design of the package and highlights two example use cases in which the tracking accuracy of different microphone geometries are characterised. 6.1 Introduction Acoustic tracking is a common method used to study vocalising animals such as birds, bats and cetaceans (Suzuki et al. 2017; Aubauer 1996; Møhl et al. 2000; Hügel et al. 2017; Holderied and Von Helversen 2003; Rhinehart et al. 2020; Blumstein et al. 2011). Using acoustic tracking, biologists can detect the position of the animal and track it through space as it moves over time. The localisation accuracy of an acoustic tracking system depends on a variety of factors. There are internal factors such as microphone array geometry, signal processing routines, and the mathematical formulations used to localise sounds (time-of-arrival, time-of-arrival-difference, angle-of-arrival, power-steering). The external factors include aspects related to the actual signal itself, ie. signal-to-noise ratio, and spectro-temporal properties of the emitted sound (noise, linear/hyperbolic sweep) (Wahlberg 1999). While experiments and analytical modelling may be the definitive way to determine a tracking system’s end accuracy, simulations allow a quick and systematic method to estimate the source of tracking errors. tacost provides a flexible workflow to manipulate and study the effect of both internal and external factors. tacost generates audio files for source positions and array geometries specified by the user. This allows the user to analyse the efficacy of their tracking system’s baseline performance. 6.2 Statement of need Generating simulated audio for a set of source sounds, positions and a given array configuration is a relatively simple task. However, to my knowledge, there are no publicly available, tested and documented packages for this task published to date. Codebases that are publicly available have the advantage of being used by a larger user-base and can thus benefit from bug discoveries much faster than in-house or individually written one-time use scripts. tacost provides a robust and well-documented software workflow (Taschuk and Wilson 2016) with user and developer friendly documentation hosted online. tacost contributes to the Python scientific ecosystem in the hope of promoting the growth of acoustics and bioacoustic research in open-source languages like Python. In particular, tacost will help researchers working in the field of acoustics and bio-acoustics (eg. Framond-Bénard et al. 2020) plan and examine the behaviour of their acoustic tracking systems. 6.3 Design The design of tacost focusses on a reproducible and user-friendly method (Wilson et al. 2012) to generate WAV files that form the input for acoustic tracking softwares. Users may interact with tacost through custom-written Python scripts by calling it as a Python package with import tacost or in the ‘no-coding’ mode. The ‘no-coding’ mode is especially suitable for users unfamiliar with Python. The no-coding mode is based around a parameter file that is used to specify various parts of the WAV file to be created. Through the parameter file the user can specify the emitted sound, source positions, inter-sound-intervals, sampling rate and other relevant variables to customise the test scenario. 6.4 Examples The localisation accuracy of a microphone array may not be uniform over 3D space (Aubauer 1996; Wahlberg 1999). This accuracy is independent of the actual signal and recording conditions of the input data, but rather dependent on the array geometry and mathematical formulations used to record and calculate sound source position. The accuracy of a few microphone array configurations has been characterised analytically (Aubauer 1996) and experimentally (Wahlberg 1999). While reflecting the system’s capabilities, analytical and experimental characterisations are often time-intensive. In contrast, simulation uncovers the intrinsic accuracy of an array relatively quickly through the use of audio files with simulated emission points spread across the recording volume of interest. tacost can be used to characterise the maximal localisation accuracy of an acoustic tracking system with novel array geometries and recording scenarios. In Example 1, I show how tacost can be used to verify known trends in localisation error with the tristar60, a commonly used array system. In Example 2, I show how tacost can be used to estimate the expected localisation error in a multi-microphone array with a novel and field-friendly geometry. 6.4.1 Localisation accuracy of the tristar60 system The tristar60 array is a commonly used array geometry (Aubauer 1996; Holderied and Von Helversen 2003; Hügel et al. 2017; Lewanzik and Goerlitz 2018) with 4 microphones in a plane on an inverted T array. Three peripheral microphones are placed 120\\(^{\\circ}\\) to each other at 60 cm radial distance from the central mic on the inverted T-array. A series of emission points spanning the upper right quadrant of the array were simulated. The emitted sound was set to a linear sweep. The output WAV files from tacost were run through the TOADSuite package (Goerlitz 2019; Stilz, Koblitz, and Goerlitz 2019), a software package that localises sounds using the time-of-arrival-differences across channels. Figure shows the localisation accuracy map for the tristar60 microphone array. It can be seen (Figure ) that localisation error increases with increasing radial distance from the central microphone, and remains &lt;7\\(\\%\\) of the radial distance. 6.4.2 Localisation accuracy of a multi-microphone array in the field While recording in the field, it may be difficult to use fixed arrays mounted on stands. Arrays on stands are difficult to carry and may also influence the behaviour of the animals being recorded. It is thus advantageous to use less obtrusive microphone geometries, for instance by placing microphones are placed on pre-existing structures such as the walls of a cave or trees. These microphone geometries are field-friendly, but their localisation accuracy is hard to characterise analytically. tacost is an ideal tool to explore the tracking performance of such flexibly placed microphone arrays. (Figure A) shows the microphone array geometry and recording system described in (Batstone et al. 2019). In short, the array consisted of 11 microphones, 4 of them on a 120cm tristar, and the remaining 7 microphones attached to the walls of a cave. A series of sound emission points were created simulating points in the volume enclosed by the array. The points matched the volume echolocating bats flew within. The simulated sound was set to a linear sweep, which mimicked that of a bat call. The tacost output WAV files were analysed with the TOADSuite. The resulting accuracy map reveals that overall, the localisation error is between 7-30 centimetres for the given emission points. This corresponds to a maximum error of upto 30cm in tracking the position, and of upto 19\\(\\%\\) relative error. In contrast to the previous example highlighting the increase in tracking error with increasing source sound distance, these results show a somewhat different trend. The relative error is also much higher, and it may have to do with the positioning of the sound sources in the volume with reference to the array. The relative location of the sound source affects the tracking accuracy (Aubauer 1996). 6.5 Future directions tacost as it stands is currently written to implement a first-order assessment of a tracking system’s accuracy. The package has been primarily written keeping acoustic signals propagating through air where the velocity of sound is assumed to be constant. It may also be used to test tracking in radar or underwater sonar systems, contingent on how uniform the medium of wave propagation is over the distances being studied. As of version 0.1.0 ,straight line propagation of signals are simulated, without spherical spreading or atmospheric absorption implemented. Future releases may include such propagation losses. Another important aspect affecting all tracking systems is the directionality of the sensors (microphones) and emitted signals (animal vocalisations, calibration speakers). A common problem in acoustic tracking with bats and cetaceans is not being able to track animals because their echolocation calls can be very directional (Matsuta et al. 2013; A. Surlykke 2012; Koblitz et al. 2016). Implementing sensor and source sound directionality will help assessing how many microphones might be required to successfully track animals in their surroundings, and which array geometries are best able to do so. 6.6 Acknowledgements This work was supported by a doctoral fellowship from the German Academic Exchange Service (DAAD) and the International Max Planck Research School for Organismal Biology. I would like to thank Léna de Framond for generating the acoustic localisation output, Holger R Goerlitz for helpful comments on this manuscript and discussions on the topic of tracking, and the IT team atthe Max-Planck Institute for Ornithology for their support. References "],
["itsfm.html", "Chapter7 itsfm, an open-source package to reliably segment and measure sounds by frequency modulation Abstract 7.1 Introduction 7.2 Package description 7.3 Methods evaluation 7.4 Discussion 7.5 Open-source software and packages used 7.6 Supporting information 7.7 Acknowledgements", " Chapter7 itsfm, an open-source package to reliably segment and measure sounds by frequency modulation This chapter was published as a preprint on biorXiv: Beleyur, T. (2020). itsfm, an open-source package to reliably segment and measure sounds by frequency modulation bioRxiv. INSERT DOI HERE!!!! ## ## Attaching package: &#39;flextable&#39; ## The following objects are masked from &#39;package:kableExtra&#39;: ## ## as_image, footnote Abstract Analysing animal vocalisations in detail provides insights into the biomechanics, decision making and sensory processes behind their behaviours. Echolocating bats, and in particular, the CF-FM calls of high-duty cycle bats serve as a convenient model system to illustrate this point. The CF component in the CF-FM call is used for prey detection and the FM component is used in target ranging. According to the behavioural context at hand such as flight with conspecifics or prey capture, bats choose to increase the duration, intensity or spectral range of the components differently. Studying the call component alterations requires an objective methodology that first segments the components and then allows measurements on them. Studies till now have segmented the call components manually, or automatically using what I term the ‘peak-frequency’ method. Manual segmentation is error prone, while the ‘peak-frequency’ method requires on-axis recordings for good results. Despite multiple papers using a peak-frequency based segmentation, there remain no publicly available software implementations. itsfm is an open-source package that fills this gap with two implemntations that can segment CF-FM calls, one of them being an implementation of the peak-percentage method. itsfm additionally introduces the ‘pseudo-Wigner-Ville distribution’ (PWVD) method for call segmentation, thus allowing the segmentation of calls captured under a wider variety of recording conditions. I create a synthetic dataset and assess the performance of the PWVD method and the ‘peak-frequency’ method. The PWVD performs consistently well in call component segmentation in comparison to the peak-percentage method. I also discuss the supporting methods in the itsfm package that can help the further automatic segmentation, measurement and analysis of sounds. Though originally developed for the segmentation and measurement of CF-FM bat calls, the methods in itsfm are species-agnostic, and may be used for vocalisations of any type. 7.1 Introduction Vocalisations are a window into the sensory, behavioural and biomechanical states of an animal (Green and Marler 1979; Metzner and Müller 2016). Echolocating bats present a unique model system where vocalisations play a fundamental role in the animal’s sensorimotor decisions. Echolocating bats emit loud calls and listen for returning echoes to detect objects around them (Donald R Griffin 1958). Bats are known to flexibly alter various aspects of their calls to optimise echo detection, and thus their own sensory input. For instance, bats flying in the open emit long calls with a narrow bandwidth, and switch to short high-bandwidth sweeps as they are about attack an insect prey (M Brock Fenton 2013). Among echolocating bats, the so-called CF-FM bats are a particularly interesting model system to study sensorimotor decisions. CF-FM calls (Figure 7.1) consist of a constant-frequency (CF) component and upto two frequency-modulated (FM) components. The CF component is used in the detection of prey wing-flutter (Schnitzler and Denzinger 2011) while the FM component is used in target ranging (Tian and Schnitzler 1997). Bats are known to independently alter the CF and FM components depending on the presence of echolocating conspecifics (Fawcett et al. 2015), artificial playbacks (Lu, Zhang, and Luo 2020; Hage et al. 2013, 2014) or during flight manuevers (Tian and Schnitzler 1997; Schoeppler, Schnitzler, and Denzinger 2018). Studying how CF-FM bats alter their call components requires an objective method that can reliably segment the components, and thus facilitate accurate acoustic parameter measurement. 7.1.1 State of the art: CF-FM call segmentation Manual segmentation of calls into CF and FM is the most intuitive and direct one can take, and has been an approach used in publications to date (Vater et al. 2003; Fawcett et al. 2015; Gessinger et al. 2019). Manual segmentation however doesn’t scale with sample size, are not very reproducible and can be biased (Brumm et al. 2017). Tian and Schnitzler (1997) is to my knowledge, the first publication to attempt a semi-manual segmentation of the CF and FM call components, and their method has formed the founding basis for for further work. I hereby refer to methods based on their approach as the ‘peak percentage’ approach. Tian and Schnitzler (1997) method relies on the fact that the CF component is at the highest frequency and forms a large part of the call. By filtering below and above a threshold frequency close to the CF frequency, the FM and CF components can be separated. In Rhinolophus ferrumequinum, Tian and Schnitzler (1997) define the threshold frequency at 0.8kHz below the 2nd harmonic of ‘CF component’. 0.8 kHz corresponds to around 1% of the CF peak frequency (~80 kHz), and is also equivalent to filtering at 99 % of the CF peak frequency. In their semi-manual method Tian and Schnitzler (1997) measured the CF peak frequency using an FFT frequency analyser to separate FM and CF components. Schoeppler, Schnitzler, and Denzinger (2018) further automate the method of Tian and Schnitzler (1997) by using 99% of the CF frequency to define FM components in a spectrogram based method run on a computer. Lu, Zhang, and Luo (2020) follow on the methodology of Schoeppler, Schnitzler, and Denzinger (2018) and Tian and Schnitzler (1997), and set the FM to begin at 97% of the CF peak frequency. Peak-percentage type approaches allow a straightforward segmentation and measurement, however the method was developed keeping on-axis, high signal-to-noise ratio recordings in mind, such as those that are obtained in flight room experiments. For instance, a pre-requisite for the peak-percentage method to work is a spectrally dominant CF component, in the absence of which the threshold frequency is not identified correctly, leading to poor segmentation. The peak-percentage method also requires setting a reasonable peak-percentage to define the threshold frequency that determines where the CF ends and FM begins. Previous studies have used percentages between 97-99% of the CF peak frequency, and the exact percentage is likely to play a big role in segmentation accuracy. Despite the apparent popularity of the peak-percentage method there are no openly available code implementations that have been tested for their performance against synthetic data. While code descriptions help explaining the principles behind design, it is not sufficient to ensure uniformity or correctness in implementation. Differences in implementation may lead to differences in scientific results (Baker and Vincent 2019; McFee et al. 2018). Publishing code as publicly available packages allows for external code inspection and improvements. itsfm fills the gap by implementing the peak-percentage method and introducing an alternate segmenation method. The segmentation methods are tested against synthetic datasets, with a open-source code base written in a non-proprietary language, and supported by a detailed user-guide online. 7.2 Package description itsfm currently provides two main approaches to segment the CF and FM components of a sound (Figure 7.1), the ‘peak-percentage’ and ‘pwvd’ methods. Figure 7.1: Diagnostic plot showing the CF/FM segmentation output of a call 7.2.1 Peak-percentage segmentation The peak-percentage method is best for sounds with one or more dominant CF components of the same frequency, and FM components that are below the CF component’s frequency (Figure 7.2). A typical rhinolophid/hipposiderid CF-FM call is the simplest example for which this method works. This method’s implementation is inspired by previously published efforts to segment CF-FM calls into their respective components (Lu, Zhang, and Luo 2020; Tian and Schnitzler 1997; Schoeppler, Schnitzler, and Denzinger 2018). The approach implemented here creates two versions of the raw audio that are low and high passed at a threshold frequency. The threshold frequency is calculated as a fixed percentage of the raw audio’s peak frequency, eg. 99%. The dB rms profile of the low and high passed audio are then calculated and compared by subtraction. Continuous regions where the low-passed audio is greater than the high-passed audio are considered FM regions, and CF regions where it is vice-versa (Figure 7.2). Figure 7.2: Diagnostic output showing the underlying basis of the peak-percentage CF-FM segmentation method. Top: A spectrogram representation of the call shown in Figure 1, Below: the high/low-passed dB rms profiles of the call. The peak frequency of the entire call is taken and a high and low-passed version of the sound if created at 99\\(\\%\\) of the call peak frequency. The dB rms profile differences of the high and low-passed sounds are calculated and subtracted from each other. The region where the low-passed dB rms profile is higher are labelled FM and vice-versa as CF. The peak-percentage method is relatively easy to parameterise as it accepts two intuitive input parameters, the peak_percentage (peak percentage value between 0-1) and window_size (the number of samples for the window used to calculate the dB rms profile of the high/low passed audio). A set of additional optional parameters may also be specified. The default low/high pass filter is a second order elliptic filter with 3dB ripple (pass band) and 10dB minimum attenuation in the stop band. The user may also optionally specify their own recursive filter coefficients. A major drawback in the peak-percentage method is its limited use-cases. Sounds must be sufficiently similar to the ‘ideal’ spectro-temporal shape of a classic CF-FM call, or they will be mis-segmented. Not even all CF-FM calls are likely to be segmented properly, eg. CF-FM calls emitted during landing or approach with short CF segments and longer FM segments. If the CF segment of the input sound does not contribute majorly to the spectrum, then the peak-percentage method fails. Experience with field recordings having off-axis CF-FM bat calls shows that the peak-percentage method also fails here because the CF component may not be as dominant as in on-axis recordings of the same call. Aside from CF-FM echolocation calls, the peak-percentage method may also be used for certain types of bird calls with long CF and short FM calls (eg. those emitted by the Pachycephala genus) 7.2.2 PWVD segmentation The pwvd method (Figure ) tracks the frequency modulation over the course of the input sound. Regions with an above threshold frequency modulation are considered FM regions, and those below are considered CF regions. The frequency modulation over the course of a sound is estimated by first generating a a sample-level ‘frequency profile’ through the use of the Pseudo Wigner-Ville Distribution (PWVD). The PWVD is a relatively underutilised method in bioacoustics (but see Fu and Kloepper 2018; Kopsinis et al. 2010) which generates time-frequency representations with high spectro-temporal resolution (Boashash 2015). The first derivative of the frequency profile is used to generate a sample-level estimate of frequency modulation and thus segment regions that are above or below the threshold. Figure 7.3: Diagnostic plots of the pwvd method. Top: Sample-level frequency modulatation rate estimates. All regions \\(\\geq\\) the threshold FM rate (here 2kHz/ms) are considered FM regions, while all regions below this are considered CF regions. Middle-Bottom: spectrogram and waveform of the original sound for comparison. The pwvd method requires somewhat more parametrisation and methodological understanding than the peak-percentage method. The pwvd method’s effectiveness is dependent on the fmrate_threshold (frequency modulation threshold, in kHz/ms), pwvd_window size (number of samples used to form the ‘slices’ of the time-frequency representation) and tfr_cliprange (permitted dynamic range in dB, used to clip the time-frequency representation and remove noise). In addition to these primary parameters, the pwvd method can be further fine-tuned to improve segmentation. The frequency profile is currently generated by tracking the dominant frequency over each slice of the PWVD representation. The dominant frequency approach is susceptible to noise and changes in sound levels over time, and thus requires additional correction routines that interpolate between problematically tracked regions. The problematic regions are identified by measuring the accelaration (second derivative) of the sound’s frequency profile. Regions above a user-set threshold are considered ‘spiky’ and are interpolated or extrapolated based on neighbouring regions frequency estimates. Even though the pwvd method requires some initial effort to parameterise, the flexibility it provides allows the analysis of a much wider-range of sounds than the peak-percentage method. The CF/FM segmentation in the pwvd method is independent of the actual call shape, and even complex sounds such as bat social calls and bird songs could be segmented through this method. A major drawback of the current pwvd implementation is its inability to reliably segment multi-harmonic sounds. Multi-harmonic sounds present a challenge for the simple frequency tracking in place currently, and alternative algorithms will be a focus of future development. 7.2.3 Supporting itsfm methods Along with the primary segmentation methods, itsfm has a collection of supporting methods that allow quantification, visualisation and batch-processing. A series of inbuilt measurement functions allow acoustically relevant measurements such as duration, rms, peak-frequency, or terminal frequency. Custom measurements may also be specified by the user. A sound analysed with the pwvd method generates more than the identified CF/FM regions. Raw data on the frequency profile of the sound and the rate of frequency modulation over time are of interest to researchers studying the speed at which vocalisations can be modulated from a behavioural and biomechanical viewpoint (Metzner and Müller 2016; Hage et al. 2013). Along with the background data used to form the segmentations, itsfm also provides a series of inbuilt visualisation functions to visualise the input sound itself (visualise_sound) and generate diagnostic plots of the segmentation output through the itsFMInspector class and visualise_cffm_segmentation (Figure 7.1). Handling audio recordings made in the field calls for the individual handling of each recording. To aid the reproducible processing of multiple files with unique input parameters itsfm can also be called through a command-line interface that accepts batch files in the CSV format. To facilitate iterative parameter optimisation, the user can choose to select only a few audio recordings or the entire set of files defined in the batch file. For each processed audio file, the diagnostic plot and measurements are saved in the working directory. The itsfm package also comes bundled with a series of field recordings of bat calls of various hipposiderid, rhinolophid and noctilionid species. These field recordings allow the user to test the utility of the methods in the package, and gain familiarity with setting correct parameters. 7.3 Methods evaluation 7.3.1 Synthetic dataset creation and segmentation To test the accuracy of the segmentation methods implemented in the itsfm package, I generated a set of synthetic CF-FM calls with known segment durations and spectral properties. Synthetic calls were generated based on calls broadly based on the structure of rhinolophid and hipposiderid call parameters using the package’s inbuilt make_cffm_call function. A set of 324 synthetic calls were made through a combination of parameters in Table 7.1. Each synthetic call consisted of an iFM, CF and tFM component (naming as per (Tian and Schnitzler 1997)), and is Tukey windowed without any padded silent samples or background noise. All synthetic calls were generated at a sampling rate of 250kHz. .tabwid table{ border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 5px; margin-bottom: 5px; table-layout: fixed; border-spacing: 0; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-689e7638{border-collapse:collapse;}.cl-688fab76{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-688ff964{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:3pt;padding-top:3pt;padding-left:3pt;padding-right:3pt;line-height: 1;background-color:transparent;}.cl-688ff965{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:3pt;padding-top:3pt;padding-left:3pt;padding-right:3pt;line-height: 1;background-color:transparent;}.cl-68906ea8{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-68906ea9{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-68906eaa{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-68906eab{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-68906eac{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-68906ead{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} Table 7.1: Parameter values used to generate synthetic CF-FM calls. The parameters broadly reflect the call shape of a rhinolophid/hipposiderid CF-FM bat calls. iFM and tFM regions were generated from the same FM parameter set. 9 CF x 6 iFM x 6 tFM combinations = 324 calls Parameter nameParameter valuesCF duration (ms)51015CF peak frequency (kHz)406090i/t FM duration (ms)12i/t FM bandwidth (kHz)51020 The synthetic calls were segmented according to method-specific parameters that were optimised based on trial-and-error on a smaller representative batch. The parameter values used for both segmentations are shown in Table 7.2. .tabwid table{ border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 5px; margin-bottom: 5px; table-layout: fixed; border-spacing: 0; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-68d51ce2{border-collapse:collapse;}.cl-68c603d8{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-68c678f4{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:3pt;padding-top:3pt;padding-left:3pt;padding-right:3pt;line-height: 1;background-color:transparent;}.cl-68c6c714{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-68c6c715{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-68c6c716{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} Table 7.2: Segmentation method specific parameters used to analyse the synthetic data. MethodpwvdWindow size (samples)FM rate threshold (kHz/ms)Accelaration threshold (kHz/ms2)Extrapolation window(s)12521075x10e-6peak_percentagepeak percentagedouble pass1250.99True The accuracy of segmentation was determined by comparing the duration of the obtained call components and the original values used to make the synthesied calls. The accuracy of other parameters eg. CF peak frequency, FM bandwidth was not assessed. It follows directly that if the call components have been poorly segmented, any measurements made from the underlying audio will also be unrepresentative of the actual call parameters. Some calls appeared to have more than three components due to false positive CF/FM identifications, and were not included in the accuracy calculations. 7.3.2 Results The pwvd method correctly identified 99% of all calls (322/324) as having only 3 components. The peak_percentage method correctly identified 94% of all calls as having 3 components (306/324). Both segmentation methods achieved a satisfactory performance. The pwvd method was superior in its segmentation accuracy to the peak_percentage method across all the parameter combinations and call components tested (Table 7.4, 7.3). The relatively lower overall performance of the peak_percentage method can be specifically attributed to the call properties of certain synthetic calls. A further inspection of calls with lower than 0.8 accuracy in component duration revealed that calls with a high CF frequency (60 and 90 kHz) and at least one low bandwidth FM component (5kHz) were segmented with lower accuracy. This is explained by the fact that the peak-percentage of the recursive filter is set at 0.99 of the peak frequency. A low FM bandwidth call with a high CF frequency will have its cutoff frequency much below the actual CF frequency (600 and 900 Hz below peak frequency here). The lower cutoff frequency will thus lead to a shorter duration estimate of the low-bandwidth FM component. The accuracy of component durations was above 0.8 for all calls segmented with the pwvd method. One percent of all pwvd segmented calls and six percent of all peak_percentage segmented calls had more than three detected call components. What caused the false positive call component detections in the pwvd and peak_percentage methods? In the peak_percentage method, the false component detections consisted of very short (\\(\\leq\\) 0.1ms) falsely detected CF and FM segments located next to one another. These neighbouring CF and FM segments were caused by brief alterations in the dB rms levels of the high and low-passed audio. The brief alterations in the dB rms levels are likely due to the combination of windowing function applied on the synthetic calls and edge effects during high/low pass filtering. Such edge effects may not necessarily occur during the processing of experimentally recorded calls, which may have smoother roll-offs in call level. The two cases where false components were detected with the pwvd method were borderline cases where false CF components were detected in what should have been an FM region of the call. On further inspection it was shown that the frequency tracking of these false CF components was indeed accurate, but the action of the error-correction routines caused a slight drop in the frequency modulation rate to 1.9 kHz/ms, just slightly below the threshold of 2.0 kHz/ms. The error-correction routines in pwvd are typically required when low signal-level at the beginning and ends of the call causes jumps in the frequency tracking. Figure 7.4: Accuracy of call component segmentation of the synthetic test data set shown with raw data overlaid on violinplots. The accuracy is calculated as the measured call component duration by the original duration. Blue violinplots: accuracy of the pwvd method, orange violinplots: accuracy of the peak-percentage method. The pwvd method is superior to the peak-percentage method in its segmentation performance across call components. .tabwid table{ border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 5px; margin-bottom: 5px; table-layout: fixed; border-spacing: 0; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-69432624{border-collapse:collapse;}.cl-69345b30{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-69348236{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:3pt;padding-top:3pt;padding-left:3pt;padding-right:3pt;line-height: 1;background-color:transparent;}.cl-6934f75c{width:70pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-6934f75d{width:103pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-6934f75e{width:101pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-6934f75f{width:100pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-6934f760{width:100pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-6934f761{width:70pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-6934f762{width:103pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-6934f763{width:101pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-6934f764{width:103pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-6934f765{width:101pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-6934f766{width:100pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-69351e58{width:70pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} Table 7.3: Summary statistics describing the performance of the two segmentation methods on the synthetised test data set. The pwvd method performs better than the peak-percentage method over the tested parameter space and for all call components (iFM,tFM and CF). Call componentRegion.typeSegmentation methodSegmentation accuracy: 95%ile rangeCFcf_durationpeak_percentage[0.8994 1.05945]CF cf_durationpwvd[0.9392 1.02185]tFMdownfm_durationpeak_percentage [0.648 1.348]tFM downfm_durationpwvd[0.88675 1.208 ]iFMupfm_durationpeak_percentage[0.624 1.3 ]iFM upfm_durationpwvd[0.918 1.2416] 7.4 Discussion Software based automation in acoustic analysis is an important step in ensuring reproducible results, which in turns spurs the growth of the research field (McFee et al. 2018; Baker and Vincent 2019). The itsfm package written in the Python (Van Rossum and Drake Jr 1995) language is an open-sourced method which may be used in the analysis of animal vocalisations such as CF-FM bat calls, and other vocalisations. The itsfm package has already been successfully used to segment and measure call parameters in an upcoming publication on group echolocation in CF-FM bats (Mysuru Rajagopalachari et al. 2020). The package introduces a new method the ‘pwvd’ method to segment CF and FM components based directly on the rate of frequency modulation. The ‘pwvd’ method also performs consistently better than the ‘peak-percentage’ method, and is thus the recommended segmentation method to use, at least for sounds that resemble CF-FM calls. The use of itsfm in the analysis of other types of vocalisations still needs further explored. For instance, bird calls have been analysed (See online user-guide). The current ‘pwvd’ frequency tracking implementation only tracks a single frequency per point of time, and thus is not able to handle multi-harmonic sounds with equal harmonic emphasis very well. Future implementations of frequency tracking need to apply more sophisticated problem-region detection and also frequency tracking (eg. Viterbi path). 7.5 Open-source software and packages used itsfm is written in the Python language (Van Rossum and Drake Jr 1995), and relies on the numpy, scipy, pandas, matplotlib and tftb (Travis E Oliphant 2006; Virtanen et al. 2020; John D Hunter 2007; Wes McKinney and others 2010; Deshpande 2019). The Jupyter Notebook and Rmarkdown projects (Kluyver et al. 2016; Xie, Allaire, and Grolemund 2018) were used in the analysis of data and writing of this paper. 7.6 Supporting information The itsfm package can be installed from the Python package index (PyPi) with the command pip install itsfm. The latest versions of the package and drafts of this paper are accessible at https://github.com/thejasvibr/itsfm. Online documentation with detailed examples and troubleshooting guides can be accessed at https://itsfm.readthedocs.io 7.7 Acknowledgements I would like to thank Diana Schoeppler for sharing know-how on analysing CF-FM calls and Neetash MR for helpful discussions. This work was funded by the DAAD and the IMPRS for Organismal Biology. I’d like to thank the following people for contributing to the call recording library Aditya Krishna, Aiqing Lin, Gloria Gessinger, Klaus-Gerhard Heller, Laura Stidsholt and Neetash MR. References "],
["general-discussion.html", "Chapter8 General Discussion", " Chapter8 General Discussion The part where things get concluded.The part where things get concluded.The part where things get concluded.The part where things get concluded.The part where things get concluded.The part where things get concluded.The part where things get concluded.The part where things get concluded.The part where things get concluded.The part where things get concluded.The part where things get concluded.The part where things get concluded.The part where things get concluded.The part where things get concluded.The part where things get concluded.The part where things get concluded.The part where things get concluded.The part where things get concluded.The part where things get concluded.The part where things get concluded. "],
["acknowledgements.html", "Chapter9 Acknowledgements", " Chapter9 Acknowledgements “There was a bat bat bat bat bat bat bat bat bat bat bat, There was a wizard wizard wizard wizard wizard wizard wizard wizard wizard, There was a guy guy guy guy guy guy guy guy guy guy guy, They worked by a lake with many swans Studying bats from dusk to dawn….” - There was a bat bat bat bat bat bat bat bat bat bat bat, Thejasvi Beleyur, performed 2019 MPIO Open Doors Science daything??? IMPRS for Organismal Biology Neetash for playing the multiple roles of friend, colleague and wife over the past few years. All current and past members of the Acoustic and Functional Ecology group for a great working environment. Office mates Daniel and Theresa. Apurva-Sindhu, Deepu-Ravi - my family in Germany for creating a home away from home over the past many years with their hospitality, food and love!! My parents, for constantly supporting all my weird ideas of becoming, at various points, a vet, a ‘zoologist’ (even before I actually knew what the word meant), a musician, and now this! I am definitely nowhere close to where I started, but am quite happy with whatever my current profession is called! Reni for providing an oasis to retreat from work and and Dieter for being the amazing conversationalist and story-teller he is. Their amazing company. And finally, I would not be here without all the bats flying through the night. All the bats that hung around as I fumbled with cables with numb hands on cold autumn nights, as I learnt to patiently deal with (hundreds of?) metres of tangled cable every night, and set up equipment hoping they’d land up. When they did it was always a pleasure to watch and hear them. So here’s to all you hovercraft Daubis, hyper pipistrelles and gliding Mouse-eared bats, none of this would have been possible without all of you! "],
["author-contributions.html", "Chapter10 Author contributions", " Chapter10 Author contributions Chapter 2: Chapter 3: Chapter 4: Chapter 5: Chapter 6: "]
]
